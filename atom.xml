<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jeldor&#39;s</title>
  <subtitle>蒋先生在这里写东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jeldorpku.github.io/"/>
  <updated>2018-05-12T06:33:58.635Z</updated>
  <id>http://jeldorpku.github.io/</id>
  
  <author>
    <name>Jeldor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你有多久没有写过一篇文章了？</title>
    <link href="http://jeldorpku.github.io/2018/05/12/how-long-is-it-since-you-last-wrote-something/"/>
    <id>http://jeldorpku.github.io/2018/05/12/how-long-is-it-since-you-last-wrote-something/</id>
    <published>2018-05-12T06:32:37.000Z</published>
    <updated>2018-05-12T06:33:58.635Z</updated>
    
    <content type="html"><![CDATA[<p>&lt;!—more—&gt;</p>
<h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><p>我已经好久没有写过一篇文章了。</p>
<p>打小时候起，我就不会写作文。小学的时候，每周要写一篇周记，老师命题，我们写。一年级的时候，老师让我们写100字，我却无论如何写不出来。每个周日的晚上我总是会在书房里冥思苦想，半天才像挤牙膏一样在作文本上留下几个似乎并不值得想那么久的词句。这样痛苦的过程让我直接以写满老师要求的字数作为最终的目标。为了凑够一百字我可真是费了老大劲。我每写几个字就要把整篇文章有多少字数一遍，一方面知道一下目前进度到哪了，一方面也是缓解一下我想不出任何可写之物的尴尬。后来字数涨了，每次从头数变得特别费事，还容易数错，就想了一些新的方法。那时还用着铅笔，我每10个字就会在字下面轻轻打个小圈，事后再擦掉。只要凑够10个圈，就大功告成了。</p>
<p>过了两年，老师要求的字数多了，而手中的铅笔也变成了不可擦的中性笔。这时，我的旧习惯在作文本上就变得特别难看。因为字数多了，数圈圈也变得费事，我索性就直接标个小数字在上面，可事后没法擦掉。这些痕迹被老师看到几次之后，老师就找我去他跟前，指着那些小数字对我说：“你要再这么干，就打回去重写。”吓得我再也没敢这么做过。</p>
<p>可是我写不出作文的毛病没有丝毫改善，我数字数的能力因为离开了那些标记反而有了些提升。我琢磨半天挤出来的那些文字，尽管自己都不大愿意再去读一遍，却是被老师经常评为佳作。语言老师最常给我的评语就是“语言简练”，每次看到时我都会笑。可不是么，写半天也写不出来几个字，当然简练了。</p>
<p>我仔细想了想，个中原因其实就是我不爱写作文，或者说我不想写我不想写的作文。如果哪天有个我想写的东西，我自然就能写出来了。不过回想整个童年，我似乎都没有什么想写的东西。</p>
<p>虽说我自己不会写作文吧，教别人写作文却是我的长项。小学的时候我成绩还不错，各科都挺优秀的，于是常常会有同学周末打电话到我家里来，问我作业怎么写。除了问数学、英语的，其中还有好一些就是问怎么写作文的。我听老师评讲作文多了，讲起每周的作文题可以说是稿子都不用打，10分钟时间能跟对方讲得头头是道。我的母亲就笑我：“你跟别人讲得那么好，自己写作文咋是个老大难呢。”我竟无言以对。</p>
<h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><p>那时的我是不喜欢语文的。我会改病句，会背古文，会标拼音，却不爱做阅读理解、仿写甚至写作文这样的题目。我喜欢有标准答案的东西。比如数学，比如英语（除了作文），每个题总有一个答案，可以被清晰的逻辑和规则推断出来。我最讨厌的就是要你去体会作者的思想感情。我自己写作文的时候都一点感情没有，咋还能体会别人的思想感情呢？至于写作文，那么麻烦的事，能不做就不做了吧，真的愁死人。它们不像数学题，你做出来了就基本上知道做对了能拿满分；像这些要写一大堆字的问题，你写半天可能也拿不到几个分数。我记得四年级的时候开学摸底考试，语文命题作文让我们写一件假期难忘的事。我一拍脑门，觉得这事好办，立马把一周前我母亲的几个大学同学带我去酒吧玩的经历绘声绘色地写了下来。那是我难得写得非常快乐的一篇考试作文。后来考试成绩却让我大跌眼镜，40分的作文我只得了9分，原因是文章内容不向上。</p>
<p>后来写作文的时候我就开始放飞自我了。我再也不管写的是啥，文章写好能得分就行。写文章的大前提是不要有错字，不要有病句。写记叙文，就是把事情前前后后有重点地讲下来；写议论文，就是把你的观点分几个方面说清楚；其他的文体没那个本事就不要去尝试。其实根本不用管自己真的想写什么，照着这个模子做出来了，就是一个好的，能得分的文章。至于里面写的内容，可能举的例子是编的，可能观点也不是自己的，但是你照着那个样子写出来，就行了。把这一点想通，我写作文的包袱就轻多了。我们只是照着一个模子打一个东西出来，是不是你想做的或者你觉得模子怎么样，都不重要。</p>
<p>如今的我想到这里才明白，原来小学时代的作文，是教你怎么用写字的方式把话说清楚；中学时代的作文，是教你怎么写一篇别人能看懂的合规矩的文章。可是没有人会教我们，怎么去写一篇好文章。我们受过的中小学教育，只是刚刚带我们入了个门而已。</p>
<h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><p>如今上大学了，我再也不用上语文课，不用写奇怪的命题作文，心里着实轻松了许多 。不过大学里要写一些课程论文，虽然生产的过程还是那般痛苦的滋味，但是东拼西凑的也总能交差。后来我自己当助教，开始批阅低年级学生的论文时，才感觉到当初自己受的写作教育是多么重要。有的学生写的文章，字字铿锵，逻辑清晰，很快就能看明白并且知道作者的观点；有的学生则是连篇累牍数千字，却让人读来一头雾水不知所云。这时我终于感到庆幸，我当初有几个很棒的语文老师，他们教会了我如何正确地写文章。但同时我又有一些失落，觉得自己基础还是不牢，因为自己依然是一个写不出东西的人，有时想表达一个意思却半天不知道应该怎样把话说清楚。这时想再回到中学去多读读书，却已然是不再可能了。</p>
<p>于是我又问自己，我多久没有读过一篇好文章了呢？最近读了野夫的《乡关何处》，觉得那些平凡人的故事十分吸引我，文字朴实而醇厚，很能打动人。在回家的火车上读了余秋雨的《文化苦旅》，也是被精彩的故事描写触动过，但好像留下的印象却是寥寥，只觉得那些文字都是相似的。读了《解忧杂货店》《人类群星闪耀时》，一个温馨治愈，一个波澜壮阔。还有《白鹿原》和《大秦帝国》，也都是荡气回肠的故事。它们该当都是好文章吧。</p>
<p>可是当我仔细想我读过的这些书时，却少有一句半句我能回想起来。反而常常出现在我脑海里的是这样的句段。“盼望着，盼望着，东风来了，春天的脚步近了。一切都像刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来了。”（朱自清《春》）“深蓝的天空中挂着一轮金黄的圆月。下面是海边的沙地，种着一望无际的碧绿的西瓜。其间有一位十一二岁的少年，项戴银圈，手执一柄钢叉，向一匹猹尽力刺去。那猹却将身一扭，反从他的胯下逃走了。”（鲁迅《少年闰土》）“翩若惊鸿，婉若游龙。荣曜秋菊，华茂春松。仿佛兮若轻云之蔽月，飘飘兮若流风之回雪。”（曹植《洛神赋》）“披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。”（王勃《滕王阁序》）这些都是当年我们语文课本里出现过的，那些让我们背诵、默写，一次又一次折磨我们的文章啊。</p>
<p>抛开那些玩命背课文的回忆，仔细咀嚼这些文字，忽然觉得它们其实很有画面感。这些日子我每天开始一天的工作前，都要把《滕王阁序》从头到尾地朗读一遍。工作累了，就回去再把这文章看看，感到心里无比地舒畅。有时候把里面的几个句子拿出来玩味一番，真是觉得全身都爽快。王勃这是一顿饭的工夫写了人家一辈子的文章啊。全文不过一篇高考作文的字数，里面讲到的故事、提到的人物、还有历史地理人文知识，我怕是琢磨半天也记不住。这就是我们的语文教材啊。当年学到它们的时候还觉得不过尔尔，现如今仔细品读，却是体会到其中无限的美感。突然间，我为汉语是我的母语而感到庆幸。这大概是只有去学了语文才能体会到的吧。</p>
<h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><p>所以我为什么写不出好文章呢？因为读的书太少了，实在太少了。就算读了那么一些书，记得的东西也是凤毛麟角，少之又少。凭着我们仅有的记忆，我们也不曾去做笔记，去写作、积累，到头来读的书怕是都喂了狗去了。现在网上能看到的文字那么丰富，每天从手机上读到的文字也是很多很多，可我又何曾整理过这些知识，甚至有一点思考和总结，去写下几句话呢？这样一想，其实我们不是写不出文章，而是无话可写。在这个信息量爆炸的时代，我们能够接触到的资源极大丰富，读书的深度却远远不及过往。我们读完书，只能获得一部分其中的智慧；但只有我们把读到的内容讲给别人听、写给别人看，进而加上自己的思考，我们才能得到更丰富的知识，才能让更多的东西在我们脑中沉淀。</p>
<p>于是我觉得，生活里需要写作。哪怕只是一点知识的整理、总结，或者是一些心中忽然闪现的想法，都值得我们去写作，去把它们以文字的形式留下来。这时我明白当初为什么要语文。我们不断地读书、写作，在这个过程中沉淀知识和思想，也让自己有一些提升。理解的能力，写作的能力，或者广义上运用语言的能力，是我们通向这个世界的大门的钥匙。写到这里我想到初中时学过的《最后一课》，又去读了一遍，才庆幸我没有辜负我受过的语文教育。</p>
<p>可是我现在还写不好一篇文章。和当年不同，我现在明白了一点当初不明白的事情，就是写作也是需要练习的。就像我们考托福GRE的时候那样，我们要一遍遍写、一遍遍改，然后去背诵其他人写的好文章，以期在考试的时候能用上一词半句。如今没有考试了，我也可以自由地写一些我想写的东西，却发现中学时学习的写作能力早已荒疏了。许多成语的意思我还不懂，甚至我这篇文字中一些词的用法都经不起语法的推敲。现在回想起来，当年的语文教材可都是宝藏。</p>
<h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><p>我开始捕捉自己的想法。有的时候是一些已经成体系的思考，有的时候可能只是我觉得适合作为文章开头的一句话，比如这句：“我已经好久没有写过一篇文章了。”我把它打到屏幕上，然后写下随之而来的一些文思。我发现原来写作也没有那么难受，只要你真的有些东西想要写下来。</p>
<p>2018年5月8日 于燕园</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;lt;!—more—&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;我已经好久没有写过一篇文章了。&lt;/p&gt;
&lt;p&gt;打小时候起，我就不会写作文。小学的时候，每周要写一篇周记
    
    </summary>
    
    
      <category term="articles" scheme="http://jeldorpku.github.io/tags/articles/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 习题（2）</title>
    <link href="http://jeldorpku.github.io/2017/03/10/CSAPP-Exercise-2/"/>
    <id>http://jeldorpku.github.io/2017/03/10/CSAPP-Exercise-2/</id>
    <published>2017-03-10T03:03:32.000Z</published>
    <updated>2017-03-13T16:27:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重点练习"><a href="#重点练习" class="headerlink" title="重点练习"></a>重点练习</h1><h2 id="2-10"><a href="#2-10" class="headerlink" title="2.10"></a>2.10</h2><blockquote>
<p>考虑如下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">void</span> <span class="title">inplace_swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</div><div class="line">&gt;     *y = *x ^ *y;</div><div class="line">&gt;     *x = *x ^ *y;</div><div class="line">&gt;     *y = *x ^ *y;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>已知 <code>a ^ a = 0</code>，求以上代码运行时每一步的情况。</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">步骤</th>
<th style="text-align:center"><code>*x</code></th>
<th style="text-align:center"><code>*y</code></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">初始</td>
<td style="text-align:center"><code>a</code></td>
<td style="text-align:center"><code>b</code></td>
</tr>
<tr>
<td style="text-align:center">第一步</td>
<td style="text-align:center"><code>a</code></td>
<td style="text-align:center"><code>a ^ b</code></td>
</tr>
<tr>
<td style="text-align:center">第二步</td>
<td style="text-align:center"><code>a ^ (a ^ b) = b</code></td>
<td style="text-align:center"><code>a ^ b</code></td>
</tr>
<tr>
<td style="text-align:center">第三步</td>
<td style="text-align:center"><code>b</code></td>
<td style="text-align:center"><code>b ^ (a ^ b) = a</code></td>
</tr>
</tbody>
</table>
<p>但这个函数在 $x = y$（注意不是 $a=b$ ）时，会出现原地交换的错误，被修改的内存将会被置0。因此如果使用这个方式交换两个数的值，一定要严防原地交换。</p>
<h2 id="2-15"><a href="#2-15" class="headerlink" title="2.15"></a>2.15</h2><blockquote>
<p>只使用位级和逻辑运算，编写一个 C 表达式，使它等价于 <code>x == y</code>。</p>
</blockquote>
<p>答案是 <code>!(x ^ y)</code>。在不能使用 <code>==</code> 运算符的时候可以用它代替。</p>
<h2 id="2-21"><a href="#2-21" class="headerlink" title="2.21"></a>2.21</h2><blockquote>
<p>假设在采用补码运算的 32 位机器上对以下表达式求值，填写下表，描述强制类型转换和关系运算的结果。</p>
</blockquote>
<table>
<thead>
<tr>
<th>表达式</th>
<th>类型</th>
<th>求值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-2147483647-1 == 2147483648U</code></td>
<td>无符号</td>
<td>1</td>
</tr>
<tr>
<td><code>-2147483647-1 &lt; 2147483647</code></td>
<td>有符号</td>
<td>1</td>
</tr>
<tr>
<td><code>-2147483647-1U &lt; 2147483647</code></td>
<td>无符号</td>
<td>0</td>
</tr>
<tr>
<td><code>-2147483647-1 &lt; -2147483647</code></td>
<td>有符号</td>
<td>1</td>
</tr>
<tr>
<td><code>-2147483647-1U &lt; -2147483647</code></td>
<td>无符号</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>在运算时，无符号类型比有符号类型的等级要高。只要两个操作数之中有一个是无符号数，C语言就会在运算之前把两个操作数都转换为无符号数，再进行运算。下面把以上五个式子的十六进制表达列出。若为有符号数，则同时将十进制表达列出。</p>
<ul>
<li><code>0x80000000 == 0x80000000</code></li>
<li><code>0x80000000 &lt; 0x7FFFFFFF</code> ，<code>-2147483648 &lt; 2147483647</code></li>
<li><code>0x80000000 &lt; 0x7FFFFFFF</code></li>
<li><code>0x80000000 &lt; 0x80000001</code> ，<code>-2147483648 &lt; -2147483647</code></li>
<li><code>0x80000000 &lt; 0x80000001</code></li>
</ul>
<h2 id="2-30、2-31、2-35、2-36"><a href="#2-30、2-31、2-35、2-36" class="headerlink" title="2.30、2.31、2.35、2.36"></a>2.30、2.31、2.35、2.36</h2><blockquote>
<p>编写一个函数，检验两个有符号整数相加是否会溢出。</p>
</blockquote>
<p>补码加法的溢出有正溢出（得到负数）和负溢出（得到正数）两种。两种均不溢出才返回1，否则应该返回0。若 $x$  和 $y$ 不同号，那么一定不会溢出。因此只需要讨论 $xy&gt;0$ 的情况即可：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tadd_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> neg_over = (x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span> &amp;&amp; x + y &gt; <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> pos_over = (x &gt; <span class="number">0</span> &amp;&amp; y &gt; <span class="number">0</span> &amp;&amp; x + y &lt; <span class="number">0</span>);</div><div class="line">    <span class="keyword">return</span> !neg_over &amp;&amp; !pos_over;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是一定要注意的是，补码的运算对加法和减法是封闭的。所以用减法来检验加法是否溢出是没有作用的。</p>
<p>不过对乘法则不是这样。补码的乘法是否溢出是可以用除法来检验的。示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmult_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> p = x * y;</div><div class="line">    <span class="keyword">return</span> !x || p / x == y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面给出证明：</p>
<p>首先，当 $x=0$ 时，这个函数是符合要求的。当 $x\neq 0$ 时，考虑 $w$ 位的数字 $x$ 和 $y$ 。记 $p$ 是 $x$ 和 $y$ 进行补码乘法的结果，那么一定存在整数 $t=0$ 或 $t=1$ 使得 $x\cdot y = p + t\cdot 2^w$ 。当 $p$ 的计算溢出时，$t=1$ 。由带余除法的基本原理，存在唯一整数对 $(q, r)$ ，使得 $p=qx+r$，其中 $0\leq r &lt; |x|$。下面证明 $q=y$ 是 $r=t=0$ 的充要条件。</p>
<p>当 $q=y$ ，我们有 $x\cdot y-t\cdot 2^w = p = xy+r$。又 $r\geq 0, -t\cdot 2^w\leq 0$，故 $r=t=0$ 。当 $r=t=0$， $x\cdot y = p = q\cdot x$ ，故 $q=y$。因此 $q=y$ 是 $r=t=0$ 的充要条件。由于 $q$ 恰好是 <code>p / x</code> 的值，因此用除法来检验乘法是否溢出是有效的。</p>
<p>这一方法也可以不用除法实现。只需用 $2w$ 位有符号类型来存储结果，并看它和截断至 $w$ 位之后是否相等即可。代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmult_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int64_t</span> pll = (<span class="keyword">int64_t</span>) x * y;</div><div class="line">    <span class="keyword">return</span> pll == (<span class="keyword">int</span>) pll;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="家庭作业"><a href="#家庭作业" class="headerlink" title="家庭作业"></a>家庭作业</h1><h2 id="2-55–2-57"><a href="#2-55–2-57" class="headerlink" title="2.55–2.57"></a>2.55–2.57</h2><p>略。</p>
<h2 id="2-58"><a href="#2-58" class="headerlink" title="2.58"></a>2.58</h2><p>本题需要编写一个函数 <code>is_little_endian</code>，返回机器是用小端法还是大端法。</p>
<p>想法非常简单，只需要用1来检验即可，看第一个字节。如果第一个字节不是全0，那就是小端法，否则是大端法。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_little_endian</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> *((<span class="keyword">char</span> *) &amp;x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-59"><a href="#2-59" class="headerlink" title="2.59"></a>2.59</h2><p>本题需要编写一个 C 表达式，生成一个字，由 <code>x</code> 的最低有效字节和 <code>y</code> 中剩下的字节组成。</p>
<p>本质上是生成两个掩码，表达式是 <code>(x &amp; 0xFF) &amp; (y &amp; ~0xFF)</code> 。</p>
<h2 id="2-60"><a href="#2-60" class="headerlink" title="2.60"></a>2.60</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">replace_byte</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">int</span> i, <span class="keyword">unsigned</span> <span class="keyword">char</span> b)</span> </span>&#123;</div><div class="line">    <span class="comment">// Replace x's i th byte with b</span></div><div class="line">    <span class="keyword">return</span> (x &lt;&lt; (i &lt;&lt; <span class="number">3</span>)) | ((<span class="keyword">int</span>) b &lt;&lt; (i &lt;&lt; <span class="number">3</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-61"><a href="#2-61" class="headerlink" title="2.61"></a>2.61</h2><ul>
<li><code>x</code> 的每一位都等于1：<code>!~x</code>。</li>
<li><code>x</code> 的每一位都等于0：<code>!x</code>。</li>
<li><code>x</code> 的最低有效字节中的位都等于1：<code>!((x ^ 0xFF) &amp; 0xFF)</code> 。</li>
<li><code>x</code> 的最高有效字节中的位都等于0：<code>!(x &amp; (0xFF &lt;&lt; ((sizeof(int) - 1) &lt;&lt; 3)))</code> 。</li>
</ul>
<h2 id="2-62"><a href="#2-62" class="headerlink" title="2.62"></a>2.62</h2><blockquote>
<p>编写函数 <code>int_shifts_are_arithmetic()</code> ，在对 <code>int</code> 类型的数使用算术右移的机器上生成1，反之生成0。要求在任意字长的机器上都可以运行。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">int_shifts_are_arithmetic</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = ~<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> !(x ^ (x &gt;&gt; <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-63"><a href="#2-63" class="headerlink" title="2.63"></a>2.63</h2><blockquote>
<p>用函数 <code>srl()</code> 来用算术右移来完成逻辑右移。用函数 <code>sra()</code> 来用逻辑右移来完成算术右移。不能使用右移或除法。</p>
</blockquote>
<p>对 <code>srl()</code> 这个函数，本质是要将第 $w-1$ 位到 $w-k$ 位都刷成0（最右为第0位）。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">srl</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">unsigned</span> xsra = (<span class="keyword">int</span>) x &gt;&gt; k;</div><div class="line">    <span class="comment">// Your code here.</span></div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    <span class="keyword">unsigned</span> mask = <span class="number">2</span> &lt;&lt; (w - k - <span class="number">1</span>) - <span class="number">1</span>; <span class="comment">// in case k == 0</span></div><div class="line">    <span class="keyword">return</span> xsra &amp; mask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对 <code>sra()</code> ，需要将第 $w-1$ 位到 $w-k$ 位都统一成第 $w - k - 1$ 位的值。那么我们首先取得第 $w-k-1$ 位的值，对其取反加1，即可得到最高的 $k$ 位。于是我们把原来的数 <code>xsrl</code> 分为左右两段来处理。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">sra</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> xsrl = x &gt;&gt; k;</div><div class="line">    <span class="comment">// Your code here.</span></div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    <span class="keyword">unsigned</span> z = <span class="number">1</span> &lt;&lt; (w - k - <span class="number">1</span>);</div><div class="line">    <span class="keyword">unsigned</span> mask = z - <span class="number">1</span>;</div><div class="line">    <span class="keyword">unsigned</span> left = ~mask &amp; (~(z &amp; xsrl) + z);</div><div class="line">    <span class="keyword">unsigned</span> right = mask &amp; xsrl;</div><div class="line">    <span class="keyword">return</span> left | right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-64"><a href="#2-64" class="headerlink" title="2.64"></a>2.64</h2><blockquote>
<p>编写函数 <code>any_odd _one(x)</code> ，当 <code>x</code> 的二进制表示中的任一奇数位为1时返回1，否则返回0。假设 $w=32$ 。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">any_odd_one</span><span class="params">(<span class="keyword">unsigned</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> !!(x &amp; <span class="number">0x55555555</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-65"><a href="#2-65" class="headerlink" title="2.65"></a>2.65</h2><blockquote>
<p>编写函数 <code>odd_ones(x)</code> ，当 <code>x</code> 的二进制表达含有奇数个1时返回1，否则返回零。设 $w=32$。<strong>代码中算术运算、位运算和逻辑运算最多只能包含12个。</strong></p>
</blockquote>
<p>看到这个题目，可以考虑异或运算来对消1。如果有偶数个1，它们会两两经过异或变成0，从而最终得到0。所以将 <code>x</code> 的第一位依次与其后一位异或，到最后如果为1就是奇数个1，反之为偶数个1。但是这样会需要15次异或操作，会超出题目所限制的12个。如此一来，我们就只能考虑用对半分治的方式。先将前16位和后16位对齐后异或，再取前8位和后8位对齐后异或，直到最后剩一位，就是我们要的答案。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">odd_ones</span><span class="params">(<span class="keyword">unsigned</span> x)</span> </span>&#123;</div><div class="line">    x ^= (x &gt;&gt; <span class="number">16</span>);</div><div class="line">    x ^= (x &gt;&gt; <span class="number">8</span>);</div><div class="line">    x ^= (x &gt;&gt; <span class="number">4</span>);</div><div class="line">    x ^= (x &gt;&gt; <span class="number">2</span>);</div><div class="line">    x ^= (x &gt;&gt; <span class="number">1</span>);</div><div class="line">    <span class="keyword">return</span> (x ^ <span class="number">1</span>) &amp; <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-66"><a href="#2-66" class="headerlink" title="2.66"></a>2.66</h2><blockquote>
<p>生成一个掩码，取 <code>x</code> 的最高非零位。假设 $w=32$ 。<strong>最多只能包含15个算术运算、位级运算和逻辑运算。</strong></p>
</blockquote>
<p>本题的想法是先将 <code>x</code> 最高非零位向右扩展到最低位，再右移1位与原数异或即可。注意由于当 $x=0$ 的时候要返回 $0$ ，所以不能直接加1而要用异或来解决。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">leftmost_one</span><span class="params">(<span class="keyword">unsigned</span> x)</span> </span>&#123;</div><div class="line">    x |= (x &gt;&gt; <span class="number">1</span>);</div><div class="line">    x |= (x &gt;&gt; <span class="number">2</span>);</div><div class="line">    x |= (x &gt;&gt; <span class="number">4</span>);</div><div class="line">    x |= (x &gt;&gt; <span class="number">8</span>);</div><div class="line">    x |= (x &gt;&gt; <span class="number">16</span>);</div><div class="line">    <span class="keyword">return</span> x ^ (x &gt;&gt; <span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-67"><a href="#2-67" class="headerlink" title="2.67"></a>2.67</h2><blockquote>
<p>编写一个过程 <code>int_size_is_32()</code> ，当在一个 <code>int</code> 是32位的机器上运行时产生1，而其他情况则产生0。不允许使用 <code>sizeof</code> 运算符。下面是一个错误的尝试：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">bad_int_size_is_32</span><span class="params">()</span> </span>&#123;</div><div class="line">&gt;     <span class="keyword">int</span> set_msb = <span class="number">1</span> &lt;&lt; <span class="number">31</span>;</div><div class="line">&gt;     <span class="keyword">int</span> beyond_msb = <span class="number">1</span> &lt;&lt; <span class="number">32</span>;</div><div class="line">&gt;     <span class="keyword">return</span> set_msb &amp;&amp; !beyond_msb;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>&gt;</p>
<blockquote>
<p>请回答：</p>
<ol>
<li>这份代码在哪个方面没有遵守 C 语言标准？</li>
<li>修改代码使得它在 <code>int</code> 至少为32位的任何机器上都能正确地运行。</li>
<li>修改代码使得它在 <code>int</code> 至少为16位的任何机器上都能正确地运行。</li>
</ol>
</blockquote>
<ol>
<li><p>在第3行，左移运算的右值为32，在 <code>int</code> 为32位的机器上是不合法的，超过了左值的宽度。</p>
</li>
<li><p>将第3行修改为 <code>int beyond_msb = 2 &lt;&lt; 31;</code></p>
</li>
<li><p>若要支持至少16位的机器，那么左移的量最多为15。可以将第2、3行用如下代码替换：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">1</span> &lt;&lt; <span class="number">15</span>;</div><div class="line">a &lt;&lt;= <span class="number">15</span>;</div><div class="line"><span class="keyword">int</span> set_msb = a &lt;&lt; <span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> beyond_msb = a &lt;&lt; <span class="number">2</span>;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-68"><a href="#2-68" class="headerlink" title="2.68"></a>2.68</h2><blockquote>
<p>编写一个函数，生成一个掩码，将最低 $n$ 位置为 1 。其中 $1\leq n\leq w$ 。注意 $n=w$ 的情况。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lower_one_mask</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="number">2</span> &lt;&lt; (n - <span class="number">1</span>)) - <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-69"><a href="#2-69" class="headerlink" title="2.69"></a>2.69</h2><blockquote>
<p>写出一个具有以下原型的函数代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">/*</span></div><div class="line">&gt;  * Do rotating left shift. Assume 0 &lt;= n &lt;= w</div><div class="line">&gt;  * Examples when x = 0x12345678 and w = 32:</div><div class="line">&gt;  *    n=4 -&gt; 0x23456781, n=20 -&gt; 0x67812345</div><div class="line">&gt;  */</div><div class="line">&gt; <span class="function"><span class="keyword">unsigned</span> <span class="title">rotate_left</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">int</span> n)</span></span>;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>左移过程中，一部分位被舍去，一部分位被保留，因此我们考虑分成两部分来处理。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">rotate_left</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    <span class="keyword">unsigned</span> left = x &lt;&lt; n;</div><div class="line">    <span class="keyword">unsigned</span> right = (x &amp; ~((<span class="number">2</span> &lt;&lt; (w - n - <span class="number">1</span>)) - <span class="number">1</span>)) &gt;&gt; (w - n);</div><div class="line">    <span class="keyword">return</span> left | right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里要特别注意第4行，需要处理好 $n=0$ 的情况，因此使用了 <code>2 &lt;&lt; (w - n - 1)</code> 。这一行的意思是取出 <code>x</code> 的前 <code>n</code> 位然后右移 <code>w-n</code> 位，得到右边的部分。</p>
<h2 id="2-70"><a href="#2-70" class="headerlink" title="2.70"></a>2.70</h2><blockquote>
<p>编写一个函数，当 $x$ 可以被表示为 $n$ 位补码时返回1，否则返回0。其中 $1\leq n\leq w$ 。</p>
</blockquote>
<p>本题其实是要看 $x$ 是否在 $-2^{n-1}$ ～ $2^{n-1} -1$ 这个闭区间内。如果 $x$ 满足这个条件，那么第 $n-1$ 位就是符号位，它以上的 $w-n$ 位都与第 $n-1$ 位相同。所以考虑将 $x$ 右移 $n-1$ 位，如果得到的数是全1或者全0，那么就说明它可以被 $n$ 位补码表示出来。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fits_bits</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    x &gt;&gt;= n - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (!x) || (!~x);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-71"><a href="#2-71" class="headerlink" title="2.71"></a>2.71</h2><blockquote>
<p>题目太长不写了。</p>
</blockquote>
<ol>
<li>题目中给出的代码返回的是 <code>unsigned</code> 类型，右移时使用了逻辑右移，不能返回题目要求的 <code>int</code> 类型。</li>
<li>重写如下：</li>
</ol>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">xbyte</span><span class="params">(<span class="keyword">packed_t</span> word, <span class="keyword">int</span> bytenum)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> temp = word &lt;&lt; ((<span class="number">3</span> - bytenum) &lt;&lt; <span class="number">3</span>);</div><div class="line">    <span class="keyword">return</span> temp &gt;&gt; <span class="number">24</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-72"><a href="#2-72" class="headerlink" title="2.72"></a>2.72</h2><ol>
<li>给出的代码中采用 <code>maxbytes - sizeof(val) &gt;= 0</code> 来判断是否进行 <code>memcpy()</code> 函数。本章<a href="https://jeldorpku.github.io">笔记</a>中我们也提到，无符号类型比有符号类型级别高，两种类型进行运算时会转化成 <code>unsigned</code> 来进行。<code>sizeof()</code> 函数返回的类型是 <code>size_t</code> ，而这一标识符在 <code>&lt;stdio.h&gt;</code> 中被定义为 <code>unsigned</code> ，因此即使 <code>maxbytes &lt; sizeof(val)</code> ，它们相减都会得到一个无符号数，而它一定是非负的。</li>
<li>将  <code>maxbytes - sizeof(val) &gt;= 0</code> 替换为 <code>maxbytes &gt; 0 &amp;&amp; maxbytes &gt;= sizeof(val)</code> 。注意前面的那个条件是必需的，否则若 <code>maxbytes</code> 为负数，在比较时也会被转化为正数，后面的逻辑运算可能也会出现问题。</li>
</ol>
<h2 id="2-73"><a href="#2-73" class="headerlink" title="2.73"></a>2.73</h2><blockquote>
<p>实现饱和加法，将两个 <code>int</code> 类型的数 $x$ 和 $y$ 相加，若正溢出返回 <code>INT_MAX</code> ，负溢出返回 <code>INT_MIN</code> ，无溢出返回其和。</p>
</blockquote>
<p>由于本章习题限制不能使用条件语句，我们只能用位运算来解决这些问题。32位 <code>int</code> 表达中，<code>INT_MAX</code> 的值为 <code>0x7FFFFFFF</code> ，<code>INT_MIN</code> 的值为 <code>0x80000000</code> 。考虑以下几种情况：</p>
<ul>
<li>$x, y$ 异号，则一定不会发生溢出。</li>
<li>$x,y&gt;0$，此时可能发生正溢出。</li>
<li>$x,y&lt;0$ ，此时可能发生负溢出。</li>
</ul>
<p>因此我们可以提取 $x,y,x+y$ 三者的符号位（用右移运算），来看是否会发生溢出情况。由于右移是算术右移，直接右移 $w-1$ 位就可以得到全1或全0的一个数，表示符号。直接用位运算来表示是否溢出，则这些标记量也是全1或全0的数，且三个标记量中仅有一个是全1，剩下两个都是全0。因此可以考虑将三个标记量与其分别对应的结果进行 <code>&amp;</code> 运算，再一起进行 <code>|</code> 运算，这样可以不用分支结构来完成这个任务。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">saturate_add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> sum = x + y;</div><div class="line">    <span class="keyword">int</span> t = sum;</div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    x &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    y &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    t &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pos_ovf = ~x &amp; ~y &amp; t; <span class="comment">// x 和 y 为正而 t 为负</span></div><div class="line">    <span class="keyword">int</span> neg_ovf = x &amp; y &amp; ~t; <span class="comment">// x 和 y 为负而 t 为正</span></div><div class="line">    <span class="keyword">int</span> not_ovf = ~(pos_ovf | neg_ovf); <span class="comment">// 既未正溢出也未负溢出</span></div><div class="line">    <span class="keyword">return</span> (pos_ovf &amp; INT_MAX) | (not_ovf &amp; sum) | (neg_ovf &amp; INT_MIN); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-74"><a href="#2-74" class="headerlink" title="2.74"></a>2.74</h2><blockquote>
<p>编写函数 <code>tsub_ok(int x, int y)</code> 来检测 $x-y$ 是否溢出。</p>
</blockquote>
<p>设 $t=x-y$ ，并将 $t$ 转换为 $w$ 位补码，则有以下结论：</p>
<ul>
<li>$xy \geq 0$ ，即 $x$ 和 $y$ 同号时，一定不发生溢出。</li>
<li>$x&gt;0,y&lt;0$ ，此时可能发生正溢出，结果 $t&lt;0$ 。</li>
<li>$x<0,y>0$ ，此时可能发生负溢出，结果 $t&gt;0$ 。</0,y></li>
</ul>
<p>综上，溢出的充要条件是 $yt&gt;0,xy&lt;0$ 。继续沿用上一题的想法，写出如下函数：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">tsub_ok</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> t = x - y;</div><div class="line">    x &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    y &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    t &gt;&gt;= w - <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> (x != y) &amp;&amp; (y == t);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-75"><a href="#2-75" class="headerlink" title="2.75"></a>2.75</h2><blockquote>
<p>已知有函数 <code>int signed_high_prod(int x, int y)</code> 计算整型变量 <code>x</code> 和 <code>y</code> 相乘后高 $w$ 位的值。请编写 <code>unsigned unsigned_high_prod(unsigned x, unsigned y)</code> 来计算无符号型变量相乘后高 $w$ 位的值。</p>
</blockquote>
<p>由书中公式 2.18 可知，整型乘法和无符号类型的乘法在位级水平上是相同的。设 $x’$ 和 $y’$ 分别是 $x$ 和 $y$ 的无符号类型值，那么有：<br>$$<br>x’\cdot y’= (x + x_{w-1}\cdot 2^w)\cdot (y+y_{w-1}\cdot 2^w) = x\cdot y + (x_{w-1}\cdot y + y_{w-1}\cdot x)\cdot 2^w + 2^{2w}<br>$$<br>于是，$x’\cdot y’$ 的高 $w$ 位的计算方法如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">unsigned_high_prod</span><span class="params">(<span class="keyword">unsigned</span> x, <span class="keyword">unsigned</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> signed_high_prod((<span class="keyword">int</span>) x, (<span class="keyword">int</span>) y) + y &amp; ((<span class="keyword">int</span>) x &gt;&gt; (w - <span class="number">1</span>)) + x &amp; ((<span class="keyword">int</span>) y &gt;&gt; (w - <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-76"><a href="#2-76" class="headerlink" title="2.76"></a>2.76</h2><blockquote>
<p>库函数 <code>calloc</code> 有如下声明：<code>void *calloc(size_t nmemb, size_t size);</code> 。根据库文档：“函数 <code>calloc</code> 为一个数组分配内存，该数组有 <code>nmemb</code> 个元素，每个元素为 <code>size</code> 字节。内存设置为0。如果 <code>nmemb</code> 或 <code>size</code> 为0，则 <code>calloc</code> 返回  <code>NULL</code> 。”</p>
<p>编写 <code>calloc</code> 的实现，通过调用 <code>malloc</code> 执行分配，调用 <code>memset</code> 将内存设置为0。你的代码应该没有任何由算术溢出引起的漏洞，且无论数据类型 <code>size_t</code> 用多少位表示，代码都应该正常工作。</p>
<p>作为参考，函数 <code>malloc</code> 和 <code>memset</code> 声明如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</div><div class="line">&gt; <span class="function"><span class="keyword">void</span> *<span class="title">memset</span><span class="params">(<span class="keyword">void</span> *s, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span>;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>本题没有说要按照整数位级编码规则，因此应该可以使用乘法和条件语句吧。于是这个问题好像没有那么难？</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> *<span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> nmemb, <span class="keyword">size_t</span> size)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!(nmemb &amp; size)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">size_t</span> prod = nmemb * (size &lt;&lt; <span class="number">3</span>);</div><div class="line">    <span class="keyword">if</span> (size == prod / nmemb) &#123;</div><div class="line">        <span class="keyword">void</span> *p = <span class="built_in">malloc</span>(prod);</div><div class="line">        <span class="built_in">memset</span>(p, <span class="number">0</span>, prod);</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-77"><a href="#2-77" class="headerlink" title="2.77"></a>2.77</h2><blockquote>
<p>假设我们有一个任务：生成一段代码，将整数变量 <code>x</code> 乘以不同的常数因子 $K$ 。为了提高效率，我们想只使用 <code>+</code> <code>-</code> <code>&lt;&lt;</code> 运算。对于下列 $K$ 的值，写出执行乘法运算的 C 表达式，每个表达式中最多使用 3 个运算。</p>
<ul>
<li>$K=17$</li>
<li>$K=-7$</li>
<li>$K=60$</li>
<li>$K=-112$</li>
</ul>
</blockquote>
<ul>
<li><code>(x &lt;&lt; 4) + x</code></li>
<li><code>x - (x &lt;&lt; 3)</code></li>
<li><code>(x &lt;&lt; 6) - (x &lt;&lt; 2)</code></li>
<li><code>(x &lt;&lt; 4) - (x &lt;&lt; 7)</code></li>
</ul>
<h2 id="2-78"><a href="#2-78" class="headerlink" title="2.78"></a>2.78</h2><blockquote>
<p>写出具有如下原型的函数的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; <span class="comment">/* Divide by power of 2. Assume 0 &lt;= k &lt; w-1 */</span></div><div class="line">&gt; <span class="function"><span class="keyword">int</span> <span class="title">divide_power2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>;</div><div class="line">&gt;</div></pre></td></tr></table></figure>
</blockquote>
<p>首先计算 <code>x &gt;&gt; k</code> ，然后考虑除法的向零舍入，即 $x&lt;0$ 且 $x$ 的最后 $k$ 位不为零时要加一。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">divide_power2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> q = x &gt;&gt; k;</div><div class="line">    <span class="keyword">int</span> w = <span class="keyword">sizeof</span>(<span class="keyword">int</span>) &lt;&lt; <span class="number">3</span>;</div><div class="line">    ans += (x &gt;&gt; (w - <span class="number">1</span>)) &amp;&amp; (x &amp; ((<span class="number">1</span> &lt;&lt; k) - <span class="number">1</span>));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-79"><a href="#2-79" class="headerlink" title="2.79"></a>2.79</h2><blockquote>
<p>写出函数 <code>mul3div4</code> 的代码，对于整数参数 <code>x</code> ，计算 <code>3*x/4</code>，但是要遵循位级整数编码规则。你的代码计算 <code>3*x</code> 也会产生溢出。</p>
</blockquote>
<p>利用上一题的思想，在 $x&lt;0$ 时再进行舍入的操作。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul3div4</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> prod = (x &lt;&lt; <span class="number">1</span>) + x;</div><div class="line">    <span class="keyword">int</span> sign = !!(prod &amp; INT_MIN);</div><div class="line">    <span class="keyword">int</span> bias = !sign &amp;&amp; (x &amp; <span class="number">0x3</span>); <span class="comment">// 除以4时最后2位不为0且为负数时要加1</span></div><div class="line">    <span class="keyword">return</span> (prod &gt;&gt; <span class="number">2</span>) + bias;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-80"><a href="#2-80" class="headerlink" title="2.80"></a>2.80</h2><blockquote>
<p>写出函数 <code>threefourths</code> 的代码。对于整数参数 <code>x</code> ，计算 $\frac 34 x$ 的值，向零舍入。它不会溢出。函数应该遵循位级整数编码规则。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">threefourths</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ((x &gt;&gt; <span class="number">2</span>) &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">2</span>) + ((((x &amp; <span class="number">3</span>) &lt;&lt; <span class="number">1</span>) + (x &amp; <span class="number">3</span>)) &gt;&gt; <span class="number">2</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-81"><a href="#2-81" class="headerlink" title="2.81"></a>2.81</h2><blockquote>
<p>编写 C 表达式产生如下位模式，其中 $a^k$ 表示符号 $a$ 重复 $k$ 次。假设一个$w$ 位的数据类型。代码可以包含对参数 <code>j</code> 和 <code>k</code> 的引用，它们分别表示 $j$ 和 $k$ 的值，但是不能使用表示 $w$ 的参数。</p>
<ol>
<li>$1^{w-k} 0^k$</li>
<li>$0^{w-k-j} 1^k 0^j$</li>
</ol>
</blockquote>
<ol>
<li><code>~0 &lt;&lt; k</code></li>
<li><code>((1 &lt;&lt; k) - 1) &lt;&lt; j</code></li>
</ol>
<p>（未完，待续）</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重点练习&quot;&gt;&lt;a href=&quot;#重点练习&quot; class=&quot;headerlink&quot; title=&quot;重点练习&quot;&gt;&lt;/a&gt;重点练习&lt;/h1&gt;&lt;h2 id=&quot;2-10&quot;&gt;&lt;a href=&quot;#2-10&quot; class=&quot;headerlink&quot; title=&quot;2.10&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="计算机基础" scheme="http://jeldorpku.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSAPP" scheme="http://jeldorpku.github.io/tags/CSAPP/"/>
    
      <category term="tech" scheme="http://jeldorpku.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 笔记（2）- 信息的表示和处理</title>
    <link href="http://jeldorpku.github.io/2017/03/09/CSAPP-Notes-2/"/>
    <id>http://jeldorpku.github.io/2017/03/09/CSAPP-Notes-2/</id>
    <published>2017-03-09T00:57:49.000Z</published>
    <updated>2017-03-10T01:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h1><h2 id="十六进制与字节顺序"><a href="#十六进制与字节顺序" class="headerlink" title="十六进制与字节顺序"></a>十六进制与字节顺序</h2><p>在计算机中，信息的存储均为<strong>二进制位(bit)</strong>的形式。每八个二进制位就形成一个<strong>字节(byte)</strong>。由于二进制位的表示将会把数字拉得很长，通常我们会用十六进制来表示。每个十六进制位都恰好表示四个二进制位，高位补0。</p>
<p>内存中的空间是以字节为单位的。而一个字节只有8位，可以存储的数据非常少。因此跨字节的存储就成为了必需。这也就意味着对于内存中的对象，我们需要两个规则：</p>
<ul>
<li>这个对象的地址是什么？</li>
<li>内存中这些字节如何排列？</li>
</ul>
<p>在所有的机器上，跨越多个字节的数据都是连续存储的，其地址为它所使用的字节中地址最小的一个。例如 <code>int</code> 型变量 <code>x</code> 需要用4个字节，分别为<code>0x100 0x101 0x102 0x103</code>， 那么 <code>&amp;x</code> 的值就是 <code>0x100</code>。但是 <code>x</code> 的四个字节在其中如何排列又成为了一个问题。设 <code>x = 0x01234567</code>，那么它的排列可能是 <code>01 23 45 67</code> 也有可能是 <code>67 45 23 01</code>。前者小端在前，称为<strong>小端法(little endian)</strong>；后者大端在前，称为<strong>大端法(big endian)</strong>。</p>
<h2 id="字长"><a href="#字长" class="headerlink" title="字长"></a>字长</h2><p>每台计算机都有一个<strong>字长(word size)</strong>，表明一个指针数据的标称大小。旧一些的机器通常是32位字长的，意味着它可以访问的字节数为 $2^{32}-1$。这样的空间总和大约为4GB，也就是说32位的机器最多只支持4GB的内存。而目前市面上的机器字长都是64位，其虚拟地址空间为16EB（$1.84\times 10^{19}$字节），远远超出我们现在所使用的空间了。一般地，字长为 $w$ 的机器，虚拟地址的范围为0到 $2^w-1$。同时需要强调，无论指针的类型如何，因为它表示的都是一个虚拟地址，所以其位数不变。在64位机器上，尽管 <code>char</code> 类型只有一个字节，但是 <code>char *</code>则会被分配8个字节。</p>
<h2 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h2><p>在C语言中，字符用 <code>char</code> 类型表达，占一个字节。这一个字节表示一个整数，它与不同的字符之间有一个映射规则，即 <a href="http://www.asciitable.com" target="_blank" rel="external">ASCII</a>。因此字符型的变量存储和整数没有区别。字符串则是一个由字符组成的数组，并在其结尾有一个 <code>\0</code>，其 ASCII 码为0，标志着字符串的结尾。</p>
<h2 id="布尔代数"><a href="#布尔代数" class="headerlink" title="布尔代数"></a>布尔代数</h2><h3 id="布尔运算"><a href="#布尔运算" class="headerlink" title="布尔运算"></a>布尔运算</h3><p>布尔运算有<code>&amp;</code> <code>|</code> <code>~</code> <code>^</code> 四种，分别为<strong>与</strong>、<strong>或</strong>、<strong>非</strong>和<strong>异或</strong>。它们的操作数只有0和1两种。其运算规则如下：</p>
<ul>
<li>与：<code>1 &amp; 1 = 1</code>，其余情况为0；</li>
<li>或：<code>0 &amp; 0 = 0</code>，其余情况为1；</li>
<li>非：<code>~1 = 0</code> ，<code>~0 = 1</code>；</li>
<li>异或：两数同为1或同为0得0，否则得1；</li>
</ul>
<h3 id="位级运算"><a href="#位级运算" class="headerlink" title="位级运算"></a>位级运算</h3><p>在C语言中，同样的运算符将对操作数进行按位布尔运算。例如：</p>
<ul>
<li><code>~0x41 = ~[01000001] = [10111110] = 0xBE</code>；</li>
<li><code>0x69 &amp; 0x55 = [01101001] &amp; [01010101] = [01000001] = 0x41</code>；</li>
<li><code>0x69 | 0x55 = [01101001] &amp; [01010101] = [01111101] = 0x7D</code>；</li>
</ul>
<p>位级运算的重要作用之一是实现<strong>掩码</strong>运算。若要保留某个位，可用 <code>&amp;1</code>或者<code>|0</code>；将某些位置为0，可用 <code>&amp;0</code>；将某个位置为1，可用 <code>|1</code>。</p>
<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>逻辑运算有三种：逻辑与<code>&amp;&amp;</code>，逻辑或<code>||</code>，逻辑非<code>!</code>。其运算规则是：</p>
<ul>
<li>逻辑与：非零和非零得1，反之为0；</li>
<li>逻辑或：零和零得0，反之为1；</li>
<li>逻辑非：非零得0，零得1；</li>
</ul>
<h3 id="移位运算"><a href="#移位运算" class="headerlink" title="移位运算"></a>移位运算</h3><p>C语言中有左移<code>&lt;&lt;</code>和右移<code>&gt;&gt;</code>两种移位运算。左移时低位补0，高位舍去；右移时则分为<strong>逻辑右移</strong>和<strong>算术右移</strong>两种。逻辑右移高位直接补0，而算术右移高位将补原来数的最高位。</p>
<p>对一个 $w$ 位存储的整数，向左移位时最多可以移动 $w - 1$ 位。考虑表达式 <code>x &lt;&lt; m</code> ，若 $m &gt;= w$ ，那么计算机会先进行 <code>m %= w</code> 的运算。也就是说，如果 $m=w$，那么 <code>x &lt;&lt; m</code> 的值将与 <code>x</code> 完全相同。</p>
<h1 id="整数的表达"><a href="#整数的表达" class="headerlink" title="整数的表达"></a>整数的表达</h1><h2 id="整数的类型"><a href="#整数的类型" class="headerlink" title="整数的类型"></a>整数的类型</h2><p>在C语言中，一般有 <code>char</code> <code>short</code> <code>int</code> <code>long</code> <code>long long</code> 几种。它们占的内存（一般）为1、2、4、4、8字节。它们还有各自的无符号类型。无符号类型就只能表达非负数。</p>
<h2 id="无符号数与有符号数"><a href="#无符号数与有符号数" class="headerlink" title="无符号数与有符号数"></a>无符号数与有符号数</h2><p>对有 $w$ 位来存储的整型变量，若为无符号类型，则其表达范围为0～$2^w-1$；若为有符号类型，则其表达范围为 $-2^w$ ～ $2^w - 1$。以下均认为我们所指的整型变量由 $w$ 位存储。</p>
<p>对无符号数而言，自右向左第 $k$ 位的权重为 $2^{k-1}$。所有位的加权和即为其表示的十进制值。对有符号数而言，最高位的权重为 $-2^w$，其余与无符号数相同。这样的表达也称为整数的补码表示。在这样的编码规则下，非负数的补码和原码相同，负数的补码是其相反数按位取反再加1。</p>
<blockquote>
<p>这里需要注意，在32位 <code>int</code> 类型中，如果要表达 <code>-2147483648</code> 这个32位整数可以表达的最小值，一定要用 <code>-2147483647-1</code> 来表示。否则计算机将对 <code>2147483648</code> 这一个数取相反数。但是这个数已经超出了32位整型能表达的范围，就会出现问题。</p>
</blockquote>
<p>另外，无符号类型的等级比有符号类型要高。因此如果无符号数和有符号数进行运算，结果将返回无符号数。如以下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">sum_elements</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">unsigned</span> length)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">double</span> result = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= length - <span class="number">1</span>; ++i) &#123;</div><div class="line">        result += a[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>若 <code>length == 0</code> ，那么在 <code>for</code> 循环中，<code>length - 1</code> 就会返回无符号数的最大值 $2^{32} - 1$，从而在访问 <code>a[i]</code> 时出现下标越界的状况。将 <code>i &lt;= length - 1</code> 改为 <code>i &lt; length</code> 即可解决这个问题。同样的道理，在无符号数的运算中，<code>x - y &gt; 0</code> 和 <code>x &gt; y</code> 可能会产生不同的结果。</p>
<h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>由于存储的空间有限，一旦运算结果超出了可存储数的范围，就是出现<strong>溢出</strong>。这个时候，计算机会保留运算结果中较低的 $w$ 位。</p>
<h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>对无符号数而言，$0\leq x, y \leq 2^w - 1$ ，因此 $0\leq x + y\leq 2^{w+1}-2$ 。令 $z = x + y$，当 $0\leq z \leq 2^w - 1$ 时，不会发生溢出。但是当 $2^w\leq z\leq 2^{w+1} - 2$ 时，最高位超出了 $w$ 位的表示范围，于是得到的结果 $z’ = z\mod 2^w$。 </p>
<p>对有符号数而言，$-2^{w-1}\leq x,y\leq 2^{w-1} - 1​$，因此 $-2^w\leq x+y\leq 2^w - 2​$。令 $z=x+y​$，当 $-2^{w-1}\leq z\leq 2^{w-1} - 1​$ 时不会发生溢出。当 $2^{w-1}\leq z\leq 2^w-2​$，最高位出现一个权重为 $2^w​$ 的进位会被舍去，于是 $z’=z-2^w&lt;0​$，称为正溢出（得到负数）。当 $-2^w\leq z\leq 2^{w-1}​$，最高位出现退位，$z’=z+2^w&gt;0​$，称为负溢出（得到正数）。</p>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>类似的，乘法也会出现对应的溢出。</p>
<p>对两个无符号数 $x, y$，$0\leq x, y \leq 2^w - 1$。令 $z=x\cdot y$，则有 $0\leq z\leq 2^{2w} - 2^{w+1}+1$。然而一个无符号数 $z$ 若没有溢出，它应该满足 $0\leq z \leq 2^w-1$。在 $2^w\leq z\leq 2^{2w} - 2^{w+1}+1$ 的情况下都会出现溢出。此时将直接取低 $w$ 位。</p>
<p>有符号数的乘法在位级水平上与无符号数完全相同。因此只要将 $x\cdot y$ 的二进制表示取低 $w$ 位作为补码解读，即可得到计算的结果。考虑表达式 <code>x * x</code>，在不溢出的情况下它应该是一个大于等于0的数。设 $z=x^2$，那么不溢出的范围应该是 $z &lt; 2^{31}$。因此只要 $x\geq 2^{15.5}\approx 46341$ 就会发生溢出。事实上，若 $x=2^{16}-1=65535$，则由以下代码可以得到一个小于0的值：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">0xFFFF</span>;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %X\n"</span>, x * x, x * x);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其输出为 <code>-131071 FFFE0001</code>，即我们算出了一个小于0的 <code>x * x</code>。这其实取决于 $x^2$ 二进制表示的第 $w-1$ 位，只要它是1就可以得到这样一个正溢出的效果。</p>
<h2 id="乘法和除法的优化"><a href="#乘法和除法的优化" class="headerlink" title="乘法和除法的优化"></a>乘法和除法的优化</h2><p>从机器的水平上，乘法和除法是非常消耗时间的。乘法大约需要10个时钟周期，而除法则需要30多个。与此相比，加减和位运算则都只需要1个时钟周期。所以将乘法和除法优化为移位和加减将让程序执行的时间大大减少。</p>
<p>在十进制中，一次向左移位就意味着将原来的数乘以10。计算机中使用二进制，同理可得向左移一位就是将原来的数乘以2。假设现在我们有整数 $x$ 和常数 $y$ ，要计算 $x\cdot y$ 。若 $y=2^k$ ，那么 <code>x * y</code> 和 <code>x &lt;&lt; k</code> 的值完全相等。我们知道，$y$ 可以被表示为一个二进制数 $(y_{w-1}\cdots y_1y_0)_2$ ，因此我们有：<br>$$<br>y=\sum_{i=0}^{w - 1}y_i2^i<br>$$<br>所以可以把其中为1的位都提出来，依次移位再相加。例如要计算 <code>x * 14</code>，而 $14=2^3+2^2+2^1​$ 。所以这个运算可以被优化成 <code>(x &lt;&lt; 3) + (x &lt;&lt; 2) + (x &lt;&lt; 1)</code>。又 $14=2^4-2^1​$，它也可以被优化为 <code>(x &lt;&lt; 4) - (x &lt;&lt; 1)</code>。这一特性可以被用于解决 <a href="https://leetcode.com/problems/divide-two-integers/?tab=Description" target="_blank" rel="external">LeetCode 29: Divide two integers</a>。</p>
<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><p>浮点数是对形如 $V=x\times 2^y$ 的有理数进行编码的方案。这里说是有理数，是因为有限位的 $p$ 进制小数只能表示出有理数。这一种存储方案使我们可以对很小和很大的数进行方便的运算。</p>
<h2 id="二进制小数的表示"><a href="#二进制小数的表示" class="headerlink" title="二进制小数的表示"></a>二进制小数的表示</h2><p>一般地，对于一个 $p$ 进制的小数 $V$，我们可以将其表示为如下形式：<br>$$<br>V=\left(b_mb_{m-1}\cdots b_2b_1b_0.b_{-1}b_{-2}\cdots b_{-n+1}b_{-n}\right)_p<br>$$<br>其中，对 $-n\leq i\leq m$，均有 $0\leq b_i&lt;p$，而 $b_i$ 的权重为 $p^{i}$。故有：<br>$$<br>V=\sum_{i=-n}^{m}b_ip^i<br>$$<br>特别地，当 $p=2$ 时，就可以得到一个二进制小数了。</p>
<h2 id="IEEE浮点数"><a href="#IEEE浮点数" class="headerlink" title="IEEE浮点数"></a>IEEE浮点数</h2><p>如何用一段二进制码来表示一个浮点数是一个非常重要的问题。为此 IEEE（电气和电子工程师协会）制订了浮点数的编码标准。显而易见地，用越多的字节来编码浮点数，我们就可以获得更广的表示范围和更高的精度。IEEE 定义了单精度浮点数（4字节）和双精度浮点数（8字节）。</p>
<p>IEEE 标准是这样的。对于一个浮点数 $V$，我们将它表示为 $V=(-1)^s\times M\times 2^E$ 的形式。其中 $s$ 称为<strong>符号 (sign)</strong>，用一位0或1来表示。$M$ 称为<strong>尾数 (significand)</strong>，它是一个二进制小数。$E$ 称为<strong>阶码 (exponent)</strong>，简单理解就是指数。将这三段拼在一起，就成为了一个 IEEE 浮点数的二进制表达。因此，假如用 $w$ 位来表达这个浮点数，就需要将这段空间划分为三段，方案如下：</p>
<ul>
<li>最左边的1位为符号位 $s$。</li>
<li>阶码字段 $k$ 位，编码阶码 $E$。</li>
<li>$n$ 位小数字段，编码尾数 $M$。</li>
</ul>
<p>在单精度浮点数中，$k=8,n=23$；双精度浮点数中，$k=11,n=52$。在了解这个编码方案后我们首先发现的问题就是如何处理0。由于有独立的符号位，可能出现 $+0$ 和 $-0$ 两种。这也是 IEEE 浮点数的一个特性。依据阶码的情况，IEEE 将浮点数分为以下三种：</p>
<ul>
<li>规格化的值：$E\neq 0$ 且 $E\neq 2^k-1$。</li>
<li>非规格化的值：$E=0$。</li>
<li>特殊值：$E=2^k-1$。</li>
</ul>
<h3 id="规格化的值"><a href="#规格化的值" class="headerlink" title="规格化的值"></a>规格化的值</h3><p>在规格化的值中，阶码字段 $E$ 以无符号数的形式来表示一个有符号数（因为阶码确实需要负数，但补码用着不方便），因此会产生一个<strong>偏置 (bias)</strong>。我们用 $B$ 来表示这个偏置量，$B=2^{k-1}-1$。因此，若 $E$ 的无符号数对应值是 $e$，那么 $E=e-B$。</p>
<p>小数字段被解释为小数值 $f$，其中 $f\in [0,1)$。这里 $f=M-1$。$f$ 的二进制表示为 $0.f_{n-1}\cdots f_1f_0$。其实在这里 $V$ 就是被表示成了二进制下的科学记数法，前面被乘的部分 $M$ 应该满足 $1\leq M&lt;2$，因此一定有一位1。由于是二进制，这里小数点前面一位只可能是1，为我们的编码省下了一位。</p>
<h3 id="非规格化的值"><a href="#非规格化的值" class="headerlink" title="非规格化的值"></a>非规格化的值</h3><p>当阶码字段为全0时，阶码值 $E=1-B$。这里多出来的1为非规格化的值与规格化的值无缝衔接提供了必要的保障。此时 $M=f$，没有开头隐含的1。这为我们表示数字 $0$ 提供了可能。它表示非常接近0的那些数。</p>
<h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><p>特殊值的阶码字段为全1。当小数域为全0时，它表示无穷。$s=0$ 时为 $+\infty$，$s=1$ 时为 $-\infty$。它可以表示溢出的结果。而当小数域不是全0，它表示 NaN (Not a Number)，比如 $\sqrt{-1}$ 。</p>
<p>这样的表示方法提供了极大的运算便利，即小数段的进位一旦溢出，恰好会落入阶码字段，这是一个非常神奇的巧合。</p>
<h2 id="浮点数的舍入"><a href="#浮点数的舍入" class="headerlink" title="浮点数的舍入"></a>浮点数的舍入</h2><p>由于二进制小数不能精确地表达十进制小数的值，它需要进行适当地<strong>舍入(rounding)</strong>。计算机中的舍入和我们日常所说的“四舍五入”是不太一样的。IEEE 定义了<strong>向偶数舍入</strong>、<strong>向零舍入</strong>、<strong>向下舍入</strong>和<strong>向上舍入</strong>四种舍入方式。首先我们解释后三种。向下舍入和向上舍入分别表示下取整和上取整。向零舍入则是对正数向下舍入，而对负数向上舍入。</p>
<p>向偶数舍入的基本原则是“四舍六入五取偶”。即1.5和2.5保留整数均为2，因为2是偶数。而2.51保留整数则应该为3，因为2.51并不会是2和3之间的<strong>正中间值</strong>。如果所有的5都要进一的话，最终的平均值计算下来很有可能会偏大。因此向偶数舍入可以在统计上保持平均值的稳定。</p>
<p>相似地，在二进制小数中，我们认为0是偶数，1是奇数，而如果需要保留的最低有效位后是 $1000\cdots$ 这样的串，那么在舍入时将在最低有效位取偶数。举例如下（保留小数点后2位）：</p>
<ul>
<li>$10.00110 \approx 10.01$</li>
<li>$10.00011 \approx 10.00$</li>
<li>$10.11100 \approx 11.00$</li>
<li>$10.10100 \approx 10.10$</li>
</ul>
<p>观察以上小数，从小数点后第3位起将被舍入。若小数点后第3–5位组成 <code>100</code> 串，则需要对小数点后第2位取偶，因为它们可能是上下两个可能值的正中间值。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本章对于信息在计算机中的存储形式做了深度讲解。虽然知识点总结出来不多，但是还是需要大量的手算和练习去对布尔代数和位运算有基本的把握。由于存储空间的有限和运算精度的有限，计算机并不总能得到我们想要的答案。从这一章中可以找到以往编程中出现过的各种不能理解的错误，也可以学到一些位运算的奇技淫巧。大量的练习和实践仍然是掌握知识最重要的途径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;信息存储&quot;&gt;&lt;a href=&quot;#信息存储&quot; class=&quot;headerlink&quot; title=&quot;信息存储&quot;&gt;&lt;/a&gt;信息存储&lt;/h1&gt;&lt;h2 id=&quot;十六进制与字节顺序&quot;&gt;&lt;a href=&quot;#十六进制与字节顺序&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="计算机基础" scheme="http://jeldorpku.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSAPP" scheme="http://jeldorpku.github.io/tags/CSAPP/"/>
    
      <category term="tech" scheme="http://jeldorpku.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>CSAPP 笔记 (1)</title>
    <link href="http://jeldorpku.github.io/2017/03/05/CSAPP-Notes-1/"/>
    <id>http://jeldorpku.github.io/2017/03/05/CSAPP-Notes-1/</id>
    <published>2017-03-05T14:56:17.000Z</published>
    <updated>2017-03-05T15:35:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>听说想写代码挣钱的话，买书的钱加起来就是第一个月工资。终于没有嫌书贵，下手买了《深入理解计算机系统（第3版）》。为了保证学习效果，我自己在这里开一个小栏目做重点记录和习题解答。我对 C 语言相对熟练，于是决定啃一下这块硬骨头，希望能有毅力一直写下去。</p>
<p>先把 K&amp;R 书中的 <code>hello.c</code> 拿出来作为开篇献祭。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello, world\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第1章-计算机系统漫游"><a href="#第1章-计算机系统漫游" class="headerlink" title="第1章 计算机系统漫游"></a>第1章 计算机系统漫游</h2><p>本章涉及的知识主要是计算机体系和架构方面的基础介绍。首先抛出的观点是<strong>信息就是位+上下文</strong>。刚刚那个 <code>hello.c</code> 程序对计算机而言只是一个文本流，其中每个字符都对应了一个整数（ASCII），这些整数又分别对应一个8位二进制表达。于是这些二进制数拼在一起成为了一个由0和1组成的串。这就是<strong>位</strong>。而究竟如何去解释它们，则需要我们去指定。当我们以C语言源代码去解读时，它们就被还原为一个个字符，重新组成上面的代码，此为<strong>上下文</strong>。随后的一些内容讲述了这段程序在计算机中是如何在硬件和软件中变为可执行程序并被执行的。</p>
<h3 id="Amdahl-定律"><a href="#Amdahl-定律" class="headerlink" title="Amdahl 定律"></a>Amdahl 定律</h3><p>这一定律在本书第3版中被提前到这里，我认为这是本章阅读下来相对收获比较大的内容。设一个任务在整个程序中消耗的时间占比为 $\alpha$，而它的速度变成了原来的 $k$ 倍。那么加速比 $S$ 的表达为：<br>$$<br>S=\frac{1}{(1-\alpha) + \alpha/k}<br>$$<br>若 $k$ 趋向于无穷大，那么整个系统性能的提升将被限制在 $1/(1-\alpha)$ 。这是系统性能提升的极限。这一想法也可以用于 GPA 的核算（例如某个课程分数提高多少，对总体的 GPA 有何影响）。其中心思想是，尽管你可能对程序的一部分做出了重大的改进，但是反映在整个程序上，它的效果可能并没有那么明显。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>本书的 <a href="csapp.cs.cmu.edu">主页</a> 上有不少其他的阅读材料，还有一些 lab 可以做练习，相信会对计算机的理解更进一步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听说想写代码挣钱的话，买书的钱加起来就是第一个月工资。终于没有嫌书贵，下手买了《深入理解计算机系统（第3版）》。为了保证学习效果，我自己在这里开一个小栏目做重点记录和习题解答。我对 C 语言相对熟练，于是决定啃一下这块硬骨头，希望能有毅力一直写下去。&lt;/p&gt;
&lt;p&gt;先把 K
    
    </summary>
    
      <category term="计算机基础" scheme="http://jeldorpku.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="CSAPP" scheme="http://jeldorpku.github.io/tags/CSAPP/"/>
    
      <category term="tech" scheme="http://jeldorpku.github.io/tags/tech/"/>
    
  </entry>
  
  <entry>
    <title>十里风光百里峡</title>
    <link href="http://jeldorpku.github.io/2016/09/27/trip-to-bailixia/"/>
    <id>http://jeldorpku.github.io/2016/09/27/trip-to-bailixia/</id>
    <published>2016-09-27T00:49:44.000Z</published>
    <updated>2016-09-28T15:48:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个国庆假期最初的计划是借10月8、9日的调休和天一去大同和平遥玩耍几日避开高峰，后来她因为实习上班就没有能够付诸实施。于是作为一个替代计划，我们把目的地改成了京郊的十渡。</p>
<a id="more"></a>
<h3 id="做攻略"><a href="#做攻略" class="headerlink" title="做攻略"></a>做攻略</h3><p>坐公交车实在是一个让人头疼的事情。在选择目的地的时候，我们就看上了十渡有火车站这个特性。京原铁路从石景山南站出发一路在京西的山中蜿蜒，会经过十渡。我一直觉得，在中国，铁路和邮政是两个非常浪漫的意象，充满了旅行的气息。于是在决定改计划了之后，我们把活动的时间提前到了上个周末（9月24–25日），准备坐火车去十渡玩。</p>
<p>十渡有什么好玩的呢？那里似乎就是一个看风景的地方，而我和天一对拒马乐园的那些游乐设施没有什么太大兴趣，于是想在十渡呆一天，另一天去周边再探索一下。我们看到京原线在十渡之后有野三坡和百里峡两个站，就想两个地方选一个去玩。看了一下 <a href="http://www.mafengwo.cn" target="_blank" rel="external">蚂蜂窝</a> 上面的游记觉得百里峡还不错，可以玩一天，列车时间也合适，就在十渡订下了住宿，第二天去百里峡玩，晚上回北京。火车的行程大概是这样的：</p>
<ol>
<li>09.24 09:02–10:48 K5291 北京—十渡  硬卧代硬座 15.5元</li>
<li>09.25 08:29–09:01 Y535 十渡—百里峡 新空调硬座 9.0元</li>
<li>09.25 17:34–20:23 Y536 百里峡—北京西 新空调硬座 18.5元</li>
</ol>
<p>京原线的经典车次其实是 6437/8 这对列车，由北京西站开往大涧站，是唯一一对在京原线上每天开行的列车。但是这趟车从北京西开出是17:45，到十渡就晚上8点多了，回来的6438次列车又是早上10点前后经过十渡，所以要坐这趟车就得多住一天。这对列车的优点是会停靠北京西到大涧路上的<strong>每一个</strong>站，比如云居寺之类的小站。好在暑期、周末和法定节假日会开行 Y535/6 这对列车（原4491/2），北京站始发，终到涞源。它的弊端在于早上从北京西站开出的时间是 06:34，地铁第一班车都不一定能赶上，所以我们还是选择了 K5291 次列车（国庆假期后就不开了）前往十渡。</p>
<h3 id="坐火车"><a href="#坐火车" class="headerlink" title="坐火车"></a>坐火车</h3><p>周六早上，我和天一早早地起来去北京站赶火车。十渡和百里峡都是四等站，怕取票不方便，于是我们在自助取票机取出了所有的车票。在穿越广场去往另一边的取票点的时候我想了这么一个问题：北京站出站口在西侧，取票的地方在东侧；而地铁的出站口在西侧，进站口却在东侧（地铁北京站是单向出入的）。我跟天一说，要是把出入口的位置换一下，大家就不用走这么远了。机智的天一对我说，这样才能让大批的旅客分散在广场上呀，不然就挤在一起了。她真是太机智了，我决定改天去回答一下 <a href="https://www.zhihu.com/question/32189846" target="_blank" rel="external">有哪些外行人看来很蠢的设计实际上却是精妙无比？</a> 这个问题。对，外行人说的就是我。</p>
<p>顺利地进站，到二楼的中央候车室。候车室门口有个大妈问我们：“是去十渡的吗？需要住宿不？”我隐隐觉得有点不祥，没有理她径直走了。接着我们找到了站台检票进站上车了。这趟车似乎是套跑的，车厢外的标志上写着太原到北京，途经吕梁和涞源。</p>
<p>硬卧代硬座，这还是第一次见。大家都坐在硬卧车厢里，原来硬卧的卧具都被铺到了中铺和上铺，每个下铺坐4个人，座位编号是“编号+abcd”的方式。我和天一放下了行李，拿了点吃的出来，坐在了过道的座位上。</p>
<p>京原线以沿途的桥和隧道而著名，当年它还是一条战备铁路。还没出发时看窗外是一列开往丹东的列车，后来开出了之后又看到一列开往长春的。北京站的列车大多都开往华北和东北，见到这两列也不稀奇。</p>
<p>周五开始天气就没有那么好了，雾好大。从北京站开出之后我和天一吃了些东西，看着窗外的朦胧的景色，聊着天消磨着接近2小时的火车旅程。沿途我们路过了北京南站看到了好多和谐号；看到了丰台站，那是丰沙线从丰台西站出来的第一个车站；看到了石景山南站，那是京原线的起点；还有良各庄、孤山口、云居寺。火车在京西群山穿行，时快时慢。云雾之中巍峨的山峦时隐时现。望向时常经过的桥下，会有一道道山沟，满是灰色的碎石。远处的山崖都是土黄色的裸岩，只有向上的面上才有树木。秋天未到，树叶在雾中显出深沉的墨绿色，与岩石的纹理相映成趣。这让我们想起假期的时候在欧洲从米兰前往苏黎世的火车。那趟列车翻越了阿尔卑斯山脉，沿途的高山草甸还有流水针叶林实在是美到窒息。点缀在山间的小房屋和牛羊让整个景色充满了生气。而这里，由于海拔和地貌的原因，景色大不一样。</p>
<p>十渡站，到了。</p>
<h3 id="十渡"><a href="#十渡" class="headerlink" title="十渡"></a>十渡</h3><p>十渡站是四等站，但是下车的人好多。下车的时候有好些游客都被农家乐的大妈带着，大妈告诉他们住在哪里，条件怎么样，多少钱一间房。说得挺好的，但是实际上怎么样实在是不知道。我们提前订了个在火车站附近不远处的酒店，于是就忽略了一路上的所有吆喝。我们在十渡站里拍了几张照片，就随着人流出了站。</p>
<p>十渡站门口的路叫火车站路，宽度也就刚刚能过两辆车，加之拉客的人和游客非常多，一时间被挤得水泄不通。我们突出重围，被好几个拉客的人问要不要住宿，要不要坐车，被我们一一回绝。但有一个大妈一直穷追不舍跟了我们好几百米，最后还是没有拉到生意。路上我们看到了车迷们津津乐道的十渡二号隧道，就在十渡站东边不远处，我们从下面看也非常壮观。我们沿着火车站路走到十渡大街，就见到了不远处我们预订的酒店了。大约十分钟的路，我们被好几辆电瓶车问要不要坐车，5块一位，还说前面景区老远了。其实地图上也就1公里多的路，出来玩不就是想多走走嘛。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/tunnel.jpg" alt="十渡二号隧道"></p>
<p>十渡大街其实非常破，两侧都是平房。商店和饭馆的招牌都是统一定制的，颜色都掉得快没有了，不知道在那里风风雨雨了多少年。路上时常有运建材的大车经过，有些吵闹，不过酒店在街边向里一些的位置，非常舒适而且安静。早上起得早，我们午休了一会儿，在旅馆吃了点干粮才出门。</p>
<p>之前的游人都不知道去哪里了，大街上空荡荡的。还是有一些电瓶车开过来问我们要不要坐车，不过价钱变成了2元一位（真是坑）。走到涞宝路和十渡大街的交汇处，见到了平西抗日战争纪念馆。雕塑和建筑都还挺好看的，不过兴趣不是特别大就没有进去细看。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/pingxi.jpg" alt="平西抗日战争纪念馆"></p>
<p>本来想去玻璃栈道的，现在一看这个天气就还是放弃了。就算上去了估计也看不到什么东西，全是云里雾里的。于是我们拐弯向南，走过十渡1号桥，来到了拒马乐园附近。拒马河上有好多竹筏，带着游客玩耍。路边的餐馆、农家院也多了起来。看到这些农家院，还是觉得我们选择那个酒店是没有错的，虽然贵一点吧，但是也有锦江之星的标准了。沿途有一些驴车（应该是驴吧），带着游客四处走，散发着一股乡土的气息。</p>
<p>走近了拒马乐园也没有看到建设情况有任何好转。路边依然是平房，大大小小的摊位，卖着小吃、凉皮、麻核桃。拒马乐园看上去比想象中的埋汰多了，那里搭了个非常简陋的“台湾美食街”，有个广播在不停地单曲循环“台湾大鸡排、盐酥鸡，各种小吃烤串了……”我们坐在台阶上，看着来来往往的人群。好多是公司组织周末出来团建的，都穿着一样的文化衫；也有带着孩子来玩竹筏的。拒马河对岸山上有缆车上去，上面修了两个蹦极的塔。有个广播会喊“3，2，1”，然后就会有个人从上面蹦下来，尖叫声回响在拒马河两岸。</p>
<p>其实出来也不一定真的要玩些什么，就是很享受一起从繁忙的生活中逃离出来的这份心情。</p>
<p>离开拒马乐园，看看天色也快暗了，就慢慢往回走。路上去采购了一些干粮明天在百里峡吃，然后在一家看上去还行但实际上也没有执照的小餐馆吃了点晚饭。价格感人，质量一般，没有服务。大概也就是这么个印象了。十渡这个地方应该是被过度开发了却没有开发好才变成这样的吧。</p>
<h3 id="赶火车"><a href="#赶火车" class="headerlink" title="赶火车"></a>赶火车</h3><p>第二天早晨，我们早早起来退了房，去赶08:29的火车。我们08:00左右开始往火车站去。火车站路会从十渡二号隧道前的大桥下通过。路过那里的时候，天一看到生在路边的小野花非常漂亮，于是拿出相机拍了许多好看的花儿。她觉得花儿少了些生气，就让我拿点水出来。结果我的水壶在我的包里，另一瓶农夫山泉在她包里，手上提着的只有一瓶茉莉清茶。我们赶时间来不及了，她就呷了一口茉莉清茶，喷在了花上，然后拿着相机咔嚓一声。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/flower.JPG" alt="野花"></p>
<p>这个时候，我听见远处有火车鸣笛的声音。十渡东边有好多隧道，这个声音肯定是火车。我们当时正好在大桥下，天一端起相机对准了隧道口。忽然汽笛声陡然增大，紧接着一列货运列车开出了隧道。抓拍到这样一趟火车也算是我们的幸运吧。拍完之后我们就抓紧赶往十渡车站了。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/train-tunnel.jpeg" alt="火车出隧道"></p>
<p>一路上坡到了十渡站，大概还有不到十分钟开车。站外已经有几辆电瓶车在等候了，但是远远没有昨天我们来时的那么多。估计等到11点左右今天的K5291停靠的时候就会有大量拉客团在此守候了。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/shidu-railway.jpg" alt="十渡站"></p>
<p>到候车室门前，我们惊讶地发现门被一个链条锁锁着。这要是进不去我们今天的行程就报废了呀，在十渡再呆一天并没有任何意思。我们过去敲门，里面也没有人答应。在边上聊天扯淡的大叔看到我们来坐车，就跟我们说：“赶紧的，快咣当门，使劲咣当门！”我一开始还没有听清楚“咣当”是几个意思，天一却反应特别快，上去就是一阵猛敲，终于把里面的工作人员给咣当出来了。他们打开门还埋怨了几句，说我们要坐车也不早点来什么的。一看表，还有5分钟就要开车了，也是来得有点晚。大概是在瑞士的时候养成的习惯吧，那边坐火车只要提前一点点到就行了，也没有安检什么的。他们查了一下我们的车票，安检的机器都没有开，看在赶时间的份上就直接放我们进去了（毕竟我们俩长得这么人畜无害对吧）。进去了才发现，我们是今天这班车在此上车的仅有的两名旅客。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/shidu-railway-tianyi.jpg" alt="十渡站与火车票"></p>
<p>火车好像晚了几分钟。过了一会儿，站内的汽笛响起，仅有的几位工作人员全部都来到了站台上，站在安全线（上图中地上的白色虚线）边，面朝列车开来的方向。我们也学着他们的样子，向东立正站好。我举起相机，拍下了列车徐徐进站的样子。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/train-shidu.jpeg" alt="十渡列车"></p>
<p>我们的票上安排的是1号车厢的座位，但是列车员检了我们的票之后让我们往3、4号车厢走，似乎是因为到百里峡站下车时会方便一些。车上的人很少，到处都是空座位，基本上可以随处坐。大概因为这趟车从北京西开出的时间太早了，人也不多，而且好多都横躺在硬座位置上小憩。今天的天气也不算太好，雾很大，但是空气很清新，正好也挡住了强烈的阳光。远处的山峦还是若隐若现，景色与来时无异。车开得很快，我们吃个早饭的工夫，列车就在<strong>野三坡站</strong>停靠了。在这里的时候我明白了为什么列车员让我们往3、4号车厢走。因为这些小站站台短，不能容下整个列车，于是就会有一些车厢在站台上，有一些在站台外。估计到百里峡的时候，1号车厢就在站台外了。</p>
<p>好多人在野三坡下车。功课没有做足，也不知道野三坡站下来会有什么惊喜。如果有缘以后再来吧，我们就安心等一会儿的百里峡就好了。吃完早饭，就着窗外的景色，我们在列车上拍了些照片。不久，列车就到了百里峡站。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/tianyi-on-the-train.jpg" alt="天一坐火车"></p>
<h3 id="百里峡"><a href="#百里峡" class="headerlink" title="百里峡"></a>百里峡</h3><p>本以为这些四等站都会用复古的字体来书写站名以体现其厚重的历史气息，但是百里峡站并没有。百里峡站的标志用的是隶书，就是大家在电脑里常见的隶书，感觉非常违和，以至于我连拍照的想法都没有。我们从出站口出来就进入了一个像艺术小镇的地方，我们在路上拍下了路边的一朵小花。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/bailixia-flower.jpg" alt="百里峡站的花"></p>
<p>这边不像十渡那样令人生厌，没有拉客的，感觉只有一个小镇安安静静地落在铁路边。我们走到了迎宾街，才知道这里在下一盘大棋。迎宾街沿着拒马河伸向远方，北岸的小镇——就是我们刚走出来的这个——简直就像是在威尼斯的时候造访的彩色岛 Burano。所有的房子都被刷成了饱和度极高的鲜艳色彩，而且纯度非常高。若不是阴天有雾，这里一定更漂亮。我们在大桥上回望这个小镇，简直太好看了。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/burano-like.jpg" alt="小镇"></p>
<p>拒马河的南岸也有一条沿着河的大道，那是百里峡大道。再向南就像是景区了，建筑风格是偏古朴一些的，有飞檐。同时这边又有许多现代化的装饰，各种园艺作品比比皆是，意象还非常统一，就是松鼠。人不多，环境还很好，非常干净。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/town.jpg" alt="小镇的另一边"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/squirrel.jpg" alt="松鼠"></p>
<p>再向南走有两个摆在那里好看的火车，一节机车和一节车厢。车厢里是尚未建成的书吧，可以拍照。看样子那节车厢是真的曾经服役过，不是后来新弄的，各种原来的设施都还保留着原来火车上的气息，别有一番风味。</p>
<p>我们沿着主路继续往里面走，一路过去超市、餐馆、旅店什么都有，很方便而且不喧闹，感觉完全可以不带补给全部到这里来买。柏油路面是新铺的，街上人不多。我们看时间都要十点了，就决定在外面先吃点东西再进去玩，说不定里面就没有什么吃的了。</p>
<p>一路向里走了十多分钟到了百里峡的大门口。门口广场好大，来的游人也不多。虽说快到正午，但天气不热。全价门票115元，学生证可以半价。走过第一道门又是一个巨大的广场，边上有各式各样的雕塑类似物。最显眼的又是一只巨大的松鼠。再接着，就能看到百里峡真正的大门了。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/big-squirrel.jpg" alt="大松鼠"></p>
<p>进门之后就有一个电瓶车的乘坐点，10元一人，可以送到牛角峰。百里峡这个门进去后有两条路，左边去往牛角峰，是开发完善的路线，十悬峡和海棠峪就在牛角峰处分开；右边是蝎子沟，还没有开发。我们一路步行到牛角峰，大约2公里的路程，惊喜便从这里开始。</p>
<p>游览路线在牛角峰之前分车道和步道。步道是单独分开的，车道给电瓶车使用，不过也有游人行走。步道上有鹅卵石也有青石板，走起来很舒服，像是在做马撒鸡。步道和车道之间有行道树，可以遮阳。还有一条小溪一路顺势流下。看来这个路是一直在缓上，但是行走之时并不能感觉到。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/bailixia-path.jpg" alt="步道"></p>
<p>道路蜿蜒，一路山水风景绝佳。到了牛角峰之后就开始有休息点了。我们找地方坐下吃了点东西为自己减负。这里的地图也很清晰。前方是一条大环线，可以从海棠峪上，也可以从十悬峡上。直到两边各自的终点就会遇到天梯和缆车连接到另一边形成环路，让游人们可以不走回头路地尽情享受百里峡的美。那里还有滑竿生意，价格不便宜，不过反正我们也不需要坐。我们选择了海棠峪作为上行路线，稍事休息就出发了。</p>
<p>百里峡是个非常适合带着老人孩子来玩的地方。这边的步道开发得非常好，商业化的气息不重，没有乱七八糟的小贩。每走几百米就会遇到垃圾桶，可以分类收集垃圾，垃圾桶的样子和山石简直融为一体毫不违和。也有流动厕所，里面是用一种神奇的泡泡来清洁的，看上去也很原生态。我们一路在山谷中穿行，两侧都是峭壁，山崖直入云天。间隔一段还会有一些有关地质结构的介绍。奇山怪石也比比皆是。高深的峡谷造就了独特的光影效果，为我们观景提供了特别棒的体验。最有趣的是那个叫做“回首观音”的地方。本不见观音，回头一看，远处的一座山峰俨然就是一个观音的样子，当真是巧夺天工！</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/guanyin.jpg" alt="观音"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/fall.JPG" alt="瀑布"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/tianqiao.jpg" alt="天桥"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/huishouguanyin.jpg" alt="回首观音"></p>
<p>走到谷底便是缆车站和天梯的起点。我们在那里吃掉了身上剩下的几乎全部食物来应对接下来的天梯。天梯上下共3000级台阶，高差270米，全程木质栈道。虽然路比较长，但是每隔一两百级台阶都会有休息的长凳，非常人性化。我和天一走走停停，休息时看看风景。缆车一直在我们头顶上方，看见了山顶的缆车站就看见了终点。这里的栈道虽然总的台阶不多，但是每一段都直直的很长，爬起来还是有点磨人的，不过考虑到看到的风景，这一趟步行还是非常值得的。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/bailixia-wooden-path.jpg" alt="栈道"></p>
<p>到了山顶俯瞰山谷，这一趟上来还是非常值得的。吹着山顶习习的微风，远望对面的群山，还是想要一个更好的天气。虽然没有太阳晒，天气也不热，但是一路走来还是有点累的，出了好多汗。接着一路下山，看到了山上为商店送水的工人，背着4大箱水在栈道上健步如飞。而我们下山下得都有点腿软了。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/quanjing.jpeg" alt="山谷"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/leaf.jpg" alt="绿叶"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/shenshou.jpg" alt="写真"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/zhuzi.jpg" alt="柱"></p>
<p>十悬峡的风景也一样好，各种不同的地貌在我们身边尽现。一线天，回音谷，擎天柱，还有飞流直下的瀑布，真的是让人赏心悦目。百里峡还是个大氧吧，行走其间总能感觉到沁人心脾的自然的芬芳。峡谷里湿气很重，但是道路一点也不滑，有木板，有石板，各种路面穿行其间，与峡谷相得益彰。百里峡这个景点真的是用了心在开发，而且旅游的体验非常棒。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/tianyi-waterfall.jpg" alt="天一与瀑布"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/waterfall.JPG" alt="小瀑布"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/tianyi-bailixia.jpg" alt="天一在百里峡"></p>
<p>走出景区大门之前，我们还简单逛了一下野三坡地质博物馆，看了一下大房山地质公园的其他几个地方。周口店、百花山、上方山等等，以后还想继续来探索京郊，体验大自然。以后如果有机会去那几个地方，我们一定还会留下游记的。无论那些地方如何，百里峡这个安利请一定服下！</p>
<h3 id="归途"><a href="#归途" class="headerlink" title="归途"></a>归途</h3><p>下午四点多我们回到了小镇。在过河之前，我们买了方便面作晚餐，还买了些饮用水，另外找了一家驴肉火烧，一人吃了一个。这边的火烧虽然有点小贵，但是味道和质量还是比北大南门的那一家好不止一个档次的。提前二十分钟我们到达了百里峡站。百里峡站没有进站口，只有出站口，于是大家都从出站口进去，里面的工作人员拿着金属探测器一个个安检。我们在那里把剩下的没有吃完的一点食物吃掉，就差不多上车了。车窗外天色逐渐暗下去，我们的旅途也告一段落了。</p>
<p>下一次旅行，我们会去哪儿呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个国庆假期最初的计划是借10月8、9日的调休和天一去大同和平遥玩耍几日避开高峰，后来她因为实习上班就没有能够付诸实施。于是作为一个替代计划，我们把目的地改成了京郊的十渡。&lt;/p&gt;
    
    </summary>
    
    
      <category term="tianyi" scheme="http://jeldorpku.github.io/tags/tianyi/"/>
    
      <category term="travel" scheme="http://jeldorpku.github.io/tags/travel/"/>
    
      <category term="train" scheme="http://jeldorpku.github.io/tags/train/"/>
    
      <category term="Beijing" scheme="http://jeldorpku.github.io/tags/Beijing/"/>
    
  </entry>
  
  <entry>
    <title>如何拍一张能看的月亮</title>
    <link href="http://jeldorpku.github.io/2016/09/18/How-to-shoot-the-moon/"/>
    <id>http://jeldorpku.github.io/2016/09/18/How-to-shoot-the-moon/</id>
    <published>2016-09-18T05:32:04.000Z</published>
    <updated>2016-09-18T13:47:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个中秋终于拍到一个能看的月亮了。</p>
</blockquote>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/moon-small.jpg" alt="Moon"></p>
<a id="more"></a>
<p>蔡女士有一台单反相机，Canon EOS 70D。尽管有器材，但一直以来我都为我自己无法拍出好看的照片而非常苦恼。这与我缺少练习有非常大的关系。趁着这个中秋，各种摄影的公众号都开始推送“如何拍出好看的月亮”一类的文章，于是我也学习了一把。上面的那张图就是我最终的成品了，虽然非常一般但是也算是符合题目中<strong>能看</strong>的标准了。</p>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>不久以前看到了一篇文章，叫做 <a href="https://zhuanlan.zhihu.com/p/22325410" target="_blank" rel="external">为什么你的单反不如我的手机？——浅谈旅行摄影中时间地点季节的规划(1)</a> 。其中有一句话让我记忆非常深刻，是这样说的：</p>
<blockquote><p>用心去旅行，用脑子去拍照。</p>
<footer><strong>@木西AlexanDENG</strong><cite><a href="https://zhuanlan.zhihu.com/p/22325410" target="_blank" rel="external">zhuanlan.zhihu.com/p/22325410</a></cite></footer></blockquote>
<p>看了那篇文章之后才真是觉得以自己现在的用心程度之低，完全轮不到拼技术和天分。以前我除了中秋几乎从来不拍月亮，但是每到中秋拍出来的效果都非常差劲。比如这样的：</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/bad-moon.JPG" alt="Bad moon"></p>
<p>还有这样的：</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/bad-moon-2.JPG" alt="Another Bad Moon"></p>
<p>前者是2014年中秋在深圳家里用卡片机拍的，后者是今年中秋在博雅塔下用iPhone 6拍的（当时没带相机），都没有修过。简单来说就是<strong>惨不忍睹</strong>。于是想到之前看过的一些公号的内容，中秋之夜我回到寝室，拿起相机就走到了阳台上。</p>
<h3 id="端起相机"><a href="#端起相机" class="headerlink" title="端起相机"></a>端起相机</h3><p>我在微信公众号 AIRPHOTO (airphoto111) 的 <a href="http://mp.weixin.qq.com/s?__biz=MzAxMTkyMjA4Mg==&amp;mid=2247487710&amp;idx=1&amp;sn=c739ee741bb5cc1fd8e7f1decec56c04&amp;scene=0#wechat_redirect" target="_blank" rel="external">一篇文章</a> 里面看到了一组“很靠谱”的参数：</p>
<ul>
<li>快门：1/500 秒；</li>
<li>光圈：F8</li>
<li>ISO：100</li>
</ul>
<p>文章对此的说明是：</p>
<blockquote>
<p>拍出来可能有点暗，你后期提亮就好！这个参数是为了把月球上的环形山拍清楚！而且这个曝光时间，手持拍摄也是没问题的！记得打开防抖功能哦！</p>
</blockquote>
<p>于是我兴奋地调成了 M 模式，调好了参数，把焦距拉到最大（其实也就135mm，而且半画幅的相机最后实际焦距只有116mm），对准了月亮，按了几张。可是我在相机上预览照片的时候还以为显示屏坏了，全是黑的什么也没有啊。我想一定是传说中的<strong>有点暗</strong>，只要我用 ACR 提亮就行了。于是拔出 SD 卡插上电脑，开始校色。可是在我点了自动调整再看到月亮的时候我的下巴差点掉到地上。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/ACR-1.png" alt="ACR"></p>
<p>一定是我打开方式不对。文章的作者和上面引用的那篇一样都是木西老师，里面的月亮拍得真好看。大概是我有些东西没有弄对吧，还是自己琢磨一下。</p>
<p>想了想，这应该是白平衡不对。我觉得可能是那片天空被腾讯新浪的大楼霓虹灯给照亮了，所以把照片亮度提上来之后那些霓虹灯的光也进来了。如果是长焦的镜头放得更大或许就能避免这一点。然而我又没有高级的器材，也没有办法慢慢琢磨怎么调，还是自己发挥一下吧。于是依然在 M 档，调整了快门和光圈，把 ISO 提上来了一些，变着参数拍了几张，就有了下面这张照片。好像有点样子了哈。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/raw-moon.png" alt="Raw moon"></p>
<p>放进 ACR 自动校色再自己调整了一下之后大概是下面这个样子。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/moon-in-acr.png" alt="Moon in ACR"></p>
<p>这样的照片就比较让我满意了。至少现在拍出来的月亮不再是一个白色的亮点了。上面的环形山虽然没有说清晰可见，但是还是有了很大的进步。我把相片放进 Photoshop CS6 裁了一下，让月亮大一些，就成了文章开头的那一张成品。给蔡女士看了之后她非常满意，还专门发到了朋友圈。我真是无比自豪呀。</p>
<h3 id="总结与后续"><a href="#总结与后续" class="headerlink" title="总结与后续"></a>总结与后续</h3><p>当时拍的时候由于怕噪点，ISO 没有敢开特别高。后来和蔡女士交流了一下，也看了一些其他的文章，都说 ISO 再高一点应该会效果更好。现在相机的技术，ISO 开到3200甚至6400都不会有特别多噪点。我一想，十五的月亮十六圆，八月十六晚上再出来拍不就是了。反正除了初一附近的几天，天上天天都有月亮。算好了时间和机位出来拍一定可以拍好的。</p>
<p>2016年9月16日，农历八月十六。傍晚我专门回到宿舍拿出了相机，准备到教学楼顶上拍月亮。月亮如果要显得大的话必须要有前景，最好的前景大概就是建筑物了。所以一定要在月亮还没有升高之前就出来拍。我想好了之后晚上七点多就爬到了理教顶上。</p>
<p>东边，视线被理科二号楼挡得死死的。月亮在哪都不知道。终于明白了，有些事情光想想是不行的。该算的要算，该踩点要踩点，实践是检验真理的唯一标准。遂弃。</p>
<p>不过总结起来这次拍摄还有有一点成效的。在拍摄之前做功课的时候看到了 <a href="https://500px.com" target="_blank" rel="external">500PX</a> 这个摄影交流的网站，觉得非常培养审美，于是注册了一个帐号，在上面到处逛逛，看看别人拍的好照片都是啥样的。今天我把这张月亮作为我的处女作传了上去，竟然还获得了几个赞，瞬间对摄影有了莫大的信心。<a href="https://500px.com" target="_blank" rel="external">500PX</a> 的免费用户每周可以上传20张照片，对于我这样的入门者已经是绰绰有余了。如果今后每1–2天就能有一张照片传到上面去就最好了。这是 <a href="https://500px.com/jeldor" target="_blank" rel="external">我的 500PX 主页</a> ，希望能有进步！</p>
<h3 id="很荣幸邀请到蔡女士为我写后记"><a href="#很荣幸邀请到蔡女士为我写后记" class="headerlink" title="很荣幸邀请到蔡女士为我写后记"></a>很荣幸邀请到蔡女士为我写后记</h3><p>下面来自十九岁妙龄少女。</p>
<p>下班后去拔草了新中关新开业的<strong><em>鳗鳗的爱</em></strong>，位于三楼角落处，临窗的座位可以俯瞰中关村的街景，适合小规模聚餐，环境还算幽静。新店开业扫二维码关注店铺即可免费升级套餐，我们点了<em>鳗先生的饭</em>和<em>鱼三郎</em>套餐，套餐里配了小菜、沙拉、味噌汤、厚蛋烧、裙带菜、鸡蛋羹。推荐鳗先生的饭，鳗鱼肥美，酱汁也算美味，米饭口感也不错，反正我忍不住吃掉了一整碗，捂脸。鱼三郎套餐分别是三碗米饭上有一块肉，三文鱼、鳗鱼、鳕鱼，肉食主义的我觉得肉太少。总的来说还不错，68元的价格吃个鳗鱼饭套餐性价比也说得过去。</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/manyufan.jpg" alt="鳗先生的饭"></p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/IMG_5043.JPG" alt="摸肚肚"></p>
<p>吃完饭后，看到隔壁的船歌在搞活动免费打印照片，于是我们薅了一把羊毛哈哈！</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/yangmao.JPG" alt="羊毛"></p>
<p>今天的月亮很亮，抬头看看吧～</p>
<p>最后奉上一张今天晚上刚刚拍的大月亮！</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/big-moon-small.jpg" alt="New Big Moon"></p>
<p>北京的秋天说来就来，看到这里的你记得保暖加衣～秋天快乐～</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个中秋终于拍到一个能看的月亮了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odg8pkcmg.bkt.clouddn.com/moon-small.jpg&quot; alt=&quot;Moon&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="photography" scheme="http://jeldorpku.github.io/tags/photography/"/>
    
  </entry>
  
  <entry>
    <title>天工开物</title>
    <link href="http://jeldorpku.github.io/2016/09/14/%E5%A4%A9%E5%B7%A5%E5%BC%80%E7%89%A9/"/>
    <id>http://jeldorpku.github.io/2016/09/14/天工开物/</id>
    <published>2016-09-14T00:25:46.000Z</published>
    <updated>2016-09-16T11:43:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>所以这个博客终于搭起来了。</p>
</blockquote>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/zurich-center.jpeg" alt="Zurich Center"></p>
<a id="more"></a>
<h2 id="为什么写博客"><a href="#为什么写博客" class="headerlink" title="为什么写博客"></a>为什么写博客</h2><p>人类文明在发展过程中，知识的传播与整理在其中起到了至关重要的作用。古希腊的先哲亚里士多德涉猎无数领域，每学完一门知识就写一本书，让当时做相关领域的人直接丢了饭碗。在没有计算机的时代，写在纸上的文字（没有纸就刻在石头上）就是传播知识的最好媒介。人们获得了知识，就用文字将它们记录下来，或短文，或巨著。无论是发现了新的知识还是对已经存在的知识进行整理，文字，都是其最佳媒介。记在脑中的知识会因遗忘或大脑主人的离世而丢失，而写在纸上的文字则可以一直流传下去。这也是为什么当年秦始皇不仅要“坑儒”，还要“焚书”。</p>
<p>而在电子科技无比发达的今天，我们读的书越来越少，看的零散的知识越来越多。相比亚里士多德的年代，知识的爆炸让我们永远无法成为像他那样在那么多领域都是大师。于是在进行一些我们不熟悉的领域的活动时，比如我搭建这个博客的时候遇到了技术问题，我会上网去Google一下，一定有人已经分享过相关的经历。于是我觉得我也应该做这样一个分享者。不仅对他人有益，对自己也是一个知识技能的总结。先贤们著书立说，我们不如他们有学问，就自己写个博客权当自己的知识库吧。</p>
<p>还有一点是我觉得必须要提到的。大概半年前领导（女友大人）提醒我，三年后我也要研究生毕业了，研三开学就要找工作，那研二一年总得找时间实习吧。所以其实时间已经不多了。本科四年过得很快，硕士只有三年，其实也需要早做未来的打算。所以当时我做了一份我的<a href="https://github.com/JeldorPKU/jeldor-cv" target="_blank" rel="external">简历</a>（目前只完成了中文版），准备投实习用。在做简历的过程中，我读到了这样一篇文章，叫做<a href="http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/" target="_blank" rel="external">怎样花两年时间去面试一个人</a>。时间过去了好几年，但是我觉得作者提到的观点依然闪亮。最让我印象深刻的观点就是关于简历。仅仅一张A4的简历可以有很多水分。比如我写了我拿了一个奖，且不说这个奖的含金量如何，这个奖我到底有没有拿到都得打个问号。但是有一些东西是永远不能作假的，那就是你读过的书和你做过的实践。或者用更简洁的一个词来说，你的<strong>经历</strong>无法作假。对于我这样偏技术流的一个人来说，你积累的经验，读过的书籍，<a href="https://github.com/JeldorPKU" target="_blank" rel="external">GitHub</a> 上你提交过的代码，这其实就是我的简历。这就好比背古诗是很快就能提高的技能，但是写作却是靠日积月累的功底来体现的。这就是当时在高中的时候默写很容易拿分但是作文总是没法提高的原因。这个博客我也希望成为我的积累，作一些技术总结，写一些自己的文章，还有和领导出去玩的经历和攻略，这些都会是我今后<strong>经历</strong>的证明。</p>
<h2 id="搭博客的过程"><a href="#搭博客的过程" class="headerlink" title="搭博客的过程"></a>搭博客的过程</h2><p>说到这个还是挺有趣的一段经历。最初我想有一个自己的博客，于是在琢磨 <a href="https://wordpress.org" target="_blank" rel="external">Wordpress</a> 这个博客系统。它需要我租一个服务器，买一个域名，然后经过各种配置把网站放上线。我今年刚刚硕士入学，<a href="http://www.chsi.cn" target="_blank" rel="external">学信网</a>上还没有我们的学籍认证，所以没有办法租用<a href="https://www.aliyun.com" target="_blank" rel="external">阿里云</a>的学生优惠服务器。10年的域名大概要500–600元的费用，这也是一笔较大的支出。于是这件事就这样耽搁了下来。后来一次偶然的经历，我看到了<a href="http://xiaolai.li" target="_blank" rel="external">李笑来老师的博客</a>，觉得非常简洁大方。翻阅了一些博文之后，我了解到了 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a>，并决定用它和 GitHub Pages 结合来搭建一个静态的博客。不需要服务器，不需要域名，用git来维护，用Markdown写作，这简直就是为我量身打造的。于是在这里大概总结一下我搭博客的过程吧。</p>
<h3 id="我的电脑"><a href="#我的电脑" class="headerlink" title="我的电脑"></a>我的电脑</h3><p>我的Mac以前因为某些<del>记不清了的</del>原因安装了 <a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a> 和 <a href="http://www.ruby-lang.org/en/" target="_blank" rel="external">Ruby</a> ，所以在安装的时候省了挺多事情。基本的参考是<a href="http://xiaolai.li/2016/06/22/makecs-build-a-blog-with-hexo-on-github/" target="_blank" rel="external">使用 Hexo 为自己在 Github 上建一个静态 Blog 站点</a>这篇文章。如果前面的工作没有做可以去看看。我就直接从安装 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 开始了。</p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a></h3><p>重复造轮子是一个蛋疼的事情，安装指南请看 <a href="https://hexo.io/docs/#Installation" target="_blank" rel="external">Hexo安装指南</a>。安装完成后找一个合适的地方运行（代码中的 <code>&lt;your_blog_name&gt;</code> 请自行替换，我用的 <code>blog</code> ）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;your_blog_name&gt;</div><div class="line"><span class="built_in">cd</span> &lt;your_blog_name&gt;</div></pre></td></tr></table></figure>
<p>然后就可以开始写作了。写作指南请 <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">点击这里</a> 。</p>
<h3 id="版本控制与部署"><a href="#版本控制与部署" class="headerlink" title="版本控制与部署"></a>版本控制与部署</h3><p><a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 支持 git 和 Heroku 还有 rsync 等多种部署方式，我采用的是 git。在刚刚开始部署的时候，我把 <code>xxx.github.io</code> 这个 repo 给 clone 了下来，在里面部署了好几次都没有弄好。后来才折腾明白了 Hexo 的原理，这里简单说明一下。</p>
<p>最需要理解的一个地方在于，<strong>我们在本地管理的那个文件夹只是一个<em>内核</em></strong>。我们写完了新的文章之后，通过 <code>hexo generate</code> 才使这个<strong>内核</strong>成为成品的博客内容。git 真正进行版本控制的是这些成品。只要运行 <code>hexo deploy</code> ，Hexo 就会自动向你设定的 repo 进行 commit。千万不要直接在 <code>blog</code> 这个文件夹里面用 git，你会发现奇怪的事情的。</p>
<p>但是这样会出现一个问题，就是你自己的<strong>内核</strong>没有被 git 控制，一旦换一台电脑这个内核就丢了，所以应该还需要一个方法来管理内核。这个东西有人已经做到了，我以后再来折腾，准备参考<a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo搭建博客/" target="_blank" rel="external">GitHub Pages + Hexo搭建博客</a>。</p>
<h3 id="主题的选择"><a href="#主题的选择" class="headerlink" title="主题的选择"></a>主题的选择</h3><p>在知乎上看到了<a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">家顺张在“有哪些好看的 Hexo 主题？”下的回答</a>，于是挑选了 star 数量第一的 <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a>，于是找到了它的<a href="http://theme-next.iissnan.com" target="_blank" rel="external">配置文档</a>来进行了一番研究，配置成了现在这个样子。非常简洁大方，确实好看。后来折腾了一番之后发现李笑来老师用的也是这个主题，但是有更多的功能（比如将博文收起），准备等有空了继续折腾。</p>
<h2 id="接下来的事"><a href="#接下来的事" class="headerlink" title="接下来的事"></a>接下来的事</h2><p>Hexo 支持标签和分类，同时还可以自己新开一些页面，感觉还是需要多思考一下。初步的想法是先把 <a href="https://jeldorpku.github.io/about/">关于</a> 这个页面做起来，弄成类似简历的样子，附上一些个人介绍，这样以后投简历也不会缺素材了。至于 tags 和 categories，就等文章稍微多一些了再来仔细想想怎么分吧。</p>
<p>另外我也是刚刚开始用 Markdown 写作，还是有挺多不熟练的地方，这个技能也慢慢锻炼吧。</p>
<p>阅读和写作都是好习惯。好好读书，好好整理分享，希望这个博客能一直写下去。</p>
<hr>
<p>（题图：《静谧》。女友大人摄于苏黎世中心高地，snapseed 后期）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;所以这个博客终于搭起来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odg8pkcmg.bkt.clouddn.com/zurich-center.jpeg&quot; alt=&quot;Zurich Center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://jeldorpku.github.io/tags/hexo/"/>
    
      <category term="thoughts" scheme="http://jeldorpku.github.io/tags/thoughts/"/>
    
  </entry>
  
  <entry>
    <title>Happy 256</title>
    <link href="http://jeldorpku.github.io/2016/09/14/happy-256/"/>
    <id>http://jeldorpku.github.io/2016/09/14/happy-256/</id>
    <published>2016-09-13T16:00:00.000Z</published>
    <updated>2016-09-14T11:43:40.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前方狗粮预警！</p>
</blockquote>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/Florence.jpg" alt="Florence"></p>
<a id="more"></a>
<h3 id="这是一封信"><a href="#这是一封信" class="headerlink" title="这是一封信"></a>这是一封信</h3><p>亲爱的天一：</p>
<p>昨天是程序员节，2016年的第256天。今天就到了咱们256天的纪念日啦。你说你的微博没什么人关注，就用来记日记，你看现在我也找了个可以写类似日记的地方啦。</p>
<p>还记得在128天的时候，我给你做了一个 <a href="https://minecraft.net" target="_blank" rel="external">Minecraft</a> 的视频。当时还非常有信心地觉得你会非常喜欢这样的方式，折腾了好久把自己弄得跟网红一样做了个直播，还同时学习了好多新的技术来完成那一次视频。现在我又折腾出了这个新玩意，利用 Github Pages 和 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 来做了一个静态的博客。前面的那个 <a href="https://jeldorpku.github.io/2016/09/08/hello-world/">Hello World</a> 是 <a href="https://hexo.io" target="_blank" rel="external">Hexo</a> 自己生成的第0篇博文，那就让这篇256天的纪念成为第1篇吧！</p>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/hiking2.JPG" alt="Hiking"></p>
<p>过去的128天里，咱们携手走过了难忘的旅行。罗马、佛罗伦萨、米兰、威尼斯，还有瑞士的各种地方，这些我从来没有想过会到达的角落，都因为你的出现而成为了我宝贵的经历。与你相伴而行的两个星期真的如梦一般，让我真的好想再有机会和你一起去游历、去探索这个世界。最回味的还是苏黎世的意面，那是我们第一次一起下厨，虽然很简单，但是我对未来的生活充满了期待。</p>
<p>这么多天，我也明白了自己的好多不足，未来一定能做得更好！以前读池建强大大的 MacTalk，里面写到的一句话我留在了这个博客的签名档里：「但行好事，莫问前程」。回到生活里，那就是我现在需要在自己身上积累更多的东西，这样三年以后才能有好的出路。认真做手边的每一件事，无论轻重，只要方向是对的，就一定会有好的结果。</p>
<p>有过困难，有过纠结，有过欢乐，这段日子我们在一起经历了好多。慢慢地，我们的未来也会逐渐清晰。谢谢你一直对我的包容和爱，希望今后的路我们还可以一起携手走下去。我会一直努力下去，因为你值得我珍惜。</p>
<blockquote>
<p>我们绕了这么一圈才遇到<br>我比谁都更明白你的重要<br>这么久了我就决定了<br>决定了你的手我握了不会放掉</p>
</blockquote>
<p><img src="http://odg8pkcmg.bkt.clouddn.com/colosseo.jpg" alt="Colosseo"></p>
<p>接下来的日子嘛……想要和你一起出去玩，想要好好学拍照修图，给你拍好多好多的漂亮照片。想要好好学习实践做项目，将来投实习的时候有筹码。这些东西我心里都明白，亲爱的你不用操心。你只需要安安心心地享受我对你的好就行啦！</p>
<p>下次的惊喜，一定会在512天到来之前的！<del>不然也等得太久了吧2333我才不会那么懒</del></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is how I use Python</span></div><div class="line"><span class="keyword">for</span> years <span class="keyword">in</span> MyLife:</div><div class="line">    I.love(you)</div></pre></td></tr></table></figure>
<h3 id="PS"><a href="#PS" class="headerlink" title="PS"></a>PS</h3><p>之前想的是做一个HTML5的，但是技术上实在是来不及准备了。也许某天你看到我做的H5，那说明是我今天就埋在心里的想法终于发了芽。</p>
<hr>
<p>（题图：《佛罗伦萨》。摄于佛罗伦萨米开朗基罗广场。Snapseed 后期。）</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前方狗粮预警！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://odg8pkcmg.bkt.clouddn.com/Florence.jpg&quot; alt=&quot;Florence&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="private" scheme="http://jeldorpku.github.io/categories/private/"/>
    
    
      <category term="tianyi" scheme="http://jeldorpku.github.io/tags/tianyi/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jeldorpku.github.io/2016/09/08/hello-world/"/>
    <id>http://jeldorpku.github.io/2016/09/08/hello-world/</id>
    <published>2016-09-08T07:56:05.000Z</published>
    <updated>2016-09-14T09:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
